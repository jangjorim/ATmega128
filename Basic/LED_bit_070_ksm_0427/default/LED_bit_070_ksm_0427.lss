
LED_bit_070_ksm_0427.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000130  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000130  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000900  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000044d  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000014b  00000000  00000000  00000dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031e  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001238  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000fb  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a8  00000000  00000000  00001357  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e3       	ldi	r30, 0x30	; 48
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a2 e0       	ldi	r26, 0x02	; 2
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a2 30       	cpi	r26, 0x02	; 2
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  c8:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <main>:
#include <util/delay.h>     // util/delay 헤더파일 포함 

unsigned char num1 = 0xfe; 	//shift 연산을하기 위한 변수 선언
int main(void) {            // main 함수 정의 

	DDRA = 0b11111111;      // 포트A8개 핀을 모두 출력으로
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	8a bb       	out	0x1a, r24	; 26
  d4:	28 c0       	rjmp	.+80     	; 0x126 <main+0x56>
	//unsigned char num2 = 0xf7;
	while (1) {
		for (int i = 0; i < 7; i++) {       // for문 시작 8번만 반복
			PORTA = num1;                   //포트A의 LED를 7부터 0까지 순서로 점등
  d6:	20 91 00 01 	lds	r18, 0x0100
  da:	2b bb       	out	0x1b, r18	; 27
			num1 = (num1 << 1) + 1;       // 오른쪽으로 비트를 한칸씩 이동하여 점등
  dc:	22 0f       	add	r18, r18
  de:	2f 5f       	subi	r18, 0xFF	; 255
  e0:	20 93 00 01 	sts	0x0100, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	33 ed       	ldi	r19, 0xD3	; 211
  e8:	40 e3       	ldi	r20, 0x30	; 48
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	30 40       	sbci	r19, 0x00	; 0
  ee:	40 40       	sbci	r20, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x1a>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x24>
  f4:	00 00       	nop
int main(void) {            // main 함수 정의 

	DDRA = 0b11111111;      // 포트A8개 핀을 모두 출력으로
	//unsigned char num2 = 0xf7;
	while (1) {
		for (int i = 0; i < 7; i++) {       // for문 시작 8번만 반복
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	87 30       	cpi	r24, 0x07	; 7
  fa:	91 05       	cpc	r25, r1
  fc:	64 f3       	brlt	.-40     	; 0xd6 <main+0x6>
  fe:	87 e0       	ldi	r24, 0x07	; 7
 100:	90 e0       	ldi	r25, 0x00	; 0
			PORTA = num1;                   //포트A의 LED를 7부터 0까지 순서로 점등
			num1 = (num1 << 1) + 1;       // 오른쪽으로 비트를 한칸씩 이동하여 점등
			_delay_ms(1000);                //delay 함수 호출(1000ms 지연)
		}
		for (int i = 0;i < 7; i++){
			PORTA = num1;
 102:	20 91 00 01 	lds	r18, 0x0100
 106:	2b bb       	out	0x1b, r18	; 27
			num1 = ((num1 >> 1) + 0x80);
 108:	26 95       	lsr	r18
 10a:	20 58       	subi	r18, 0x80	; 128
 10c:	20 93 00 01 	sts	0x0100, r18
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	33 ed       	ldi	r19, 0xD3	; 211
 114:	40 e3       	ldi	r20, 0x30	; 48
 116:	21 50       	subi	r18, 0x01	; 1
 118:	30 40       	sbci	r19, 0x00	; 0
 11a:	40 40       	sbci	r20, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x46>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x50>
 120:	00 00       	nop
 122:	01 97       	sbiw	r24, 0x01	; 1
		for (int i = 0; i < 7; i++) {       // for문 시작 8번만 반복
			PORTA = num1;                   //포트A의 LED를 7부터 0까지 순서로 점등
			num1 = (num1 << 1) + 1;       // 오른쪽으로 비트를 한칸씩 이동하여 점등
			_delay_ms(1000);                //delay 함수 호출(1000ms 지연)
		}
		for (int i = 0;i < 7; i++){
 124:	71 f7       	brne	.-36     	; 0x102 <main+0x32>
int main(void) {            // main 함수 정의 

	DDRA = 0b11111111;      // 포트A8개 핀을 모두 출력으로
	//unsigned char num2 = 0xf7;
	while (1) {
		for (int i = 0; i < 7; i++) {       // for문 시작 8번만 반복
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	e6 cf       	rjmp	.-52     	; 0xf8 <main+0x28>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
