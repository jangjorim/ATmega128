
LED_level_center_ksm_0428.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000138  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000138  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000900  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000042a  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000012d  00000000  00000000  00000daa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000331  00000000  00000000  00000ed7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001208  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000101  00000000  00000000  0000122c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  0000132d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001405  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e3       	ldi	r30, 0x38	; 56
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a0 30       	cpi	r26, 0x00	; 0
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  c8:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <main>:
#include <util/delay.h>


int main (){
	int i, led_R,led_L;
	DDRA = 0xff;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	8a bb       	out	0x1a, r24	; 26
  d4:	28 c0       	rjmp	.+80     	; 0x126 <main+0x56>
	while(1){
		led_R = 0x7f;
		led_L = 0xfe;

		for (i = 0; i < 3; i++){
			PORTA = led_R & led_L;
  d6:	62 2f       	mov	r22, r18
  d8:	68 23       	and	r22, r24
  da:	6b bb       	out	0x1b, r22	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	4f ef       	ldi	r20, 0xFF	; 255
  de:	53 ed       	ldi	r21, 0xD3	; 211
  e0:	60 e3       	ldi	r22, 0x30	; 48
  e2:	41 50       	subi	r20, 0x01	; 1
  e4:	50 40       	sbci	r21, 0x00	; 0
  e6:	60 40       	sbci	r22, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x12>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x1c>
  ec:	00 00       	nop
			_delay_ms(1000);
			led_R = led_R >> 1;
  ee:	95 95       	asr	r25
  f0:	87 95       	ror	r24
			led_L = led_L << 1;
  f2:	22 0f       	add	r18, r18
  f4:	33 1f       	adc	r19, r19
	
	while(1){
		led_R = 0x7f;
		led_L = 0xfe;

		for (i = 0; i < 3; i++){
  f6:	31 96       	adiw	r30, 0x01	; 1
  f8:	e3 30       	cpi	r30, 0x03	; 3
  fa:	f1 05       	cpc	r31, r1
  fc:	64 f3       	brlt	.-40     	; 0xd6 <main+0x6>
  fe:	e3 e0       	ldi	r30, 0x03	; 3
 100:	f0 e0       	ldi	r31, 0x00	; 0
			led_R = led_R >> 1;
			led_L = led_L << 1;

		}
		for (i = 0; i < 3; i++){
			PORTA = led_R & led_L;
 102:	62 2f       	mov	r22, r18
 104:	68 23       	and	r22, r24
 106:	6b bb       	out	0x1b, r22	; 27
 108:	4f ef       	ldi	r20, 0xFF	; 255
 10a:	53 ed       	ldi	r21, 0xD3	; 211
 10c:	60 e3       	ldi	r22, 0x30	; 48
 10e:	41 50       	subi	r20, 0x01	; 1
 110:	50 40       	sbci	r21, 0x00	; 0
 112:	60 40       	sbci	r22, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x3e>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x48>
 118:	00 00       	nop
			_delay_ms(1000);
			led_R = led_R << 1;
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
			led_L = led_L >> 1;
 11e:	35 95       	asr	r19
 120:	27 95       	ror	r18
 122:	31 97       	sbiw	r30, 0x01	; 1
			_delay_ms(1000);
			led_R = led_R >> 1;
			led_L = led_L << 1;

		}
		for (i = 0; i < 3; i++){
 124:	71 f7       	brne	.-36     	; 0x102 <main+0x32>
	int i, led_R,led_L;
	DDRA = 0xff;
	
	while(1){
		led_R = 0x7f;
		led_L = 0xfe;
 126:	2e ef       	ldi	r18, 0xFE	; 254
 128:	30 e0       	ldi	r19, 0x00	; 0
int main (){
	int i, led_R,led_L;
	DDRA = 0xff;
	
	while(1){
		led_R = 0x7f;
 12a:	8f e7       	ldi	r24, 0x7F	; 127
 12c:	90 e0       	ldi	r25, 0x00	; 0
		led_L = 0xfe;

		for (i = 0; i < 3; i++){
 12e:	e0 e0       	ldi	r30, 0x00	; 0
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	e2 cf       	rjmp	.-60     	; 0xf8 <main+0x28>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
