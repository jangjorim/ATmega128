
switch_led_fnd_ksm_0710.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000184  00000218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000184  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080010a  0080010a  00000222  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000978  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000472  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000160  00000000  00000000  00000e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000031a  00000000  00000000  00000fca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000012e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000107  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  0000140f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001457  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e8       	ldi	r30, 0x84	; 132
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	aa e0       	ldi	r26, 0x0A	; 10
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	ae 30       	cpi	r26, 0x0E	; 14
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  c8:	0c 94 c0 00 	jmp	0x180	; 0x180 <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <main>:

unsigned char digit[10] = { 0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};
int count, shift;

int main(){
	DDRA = 0xff;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0xff;
  d4:	81 bb       	out	0x11, r24	; 17
	DDRE = 0x0f;
  d6:	9f e0       	ldi	r25, 0x0F	; 15
  d8:	92 b9       	out	0x02, r25	; 2

	PORTA = 0xff;
  da:	8b bb       	out	0x1b, r24	; 27
	PORTE = 0x01;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	83 b9       	out	0x03, r24	; 3
	PORTD = digit[0];
  e0:	80 91 00 01 	lds	r24, 0x0100
  e4:	82 bb       	out	0x12, r24	; 18
	while(1) {
		if(!(PINE & 0x40)){
			PORTA = ~(0x01 << shift++);
  e6:	41 e0       	ldi	r20, 0x01	; 1
  e8:	50 e0       	ldi	r21, 0x00	; 0
			while(!(PINE & 0x40));
		}
		if(!(PINE & 0x80)){
			PORTD = digit[++count];
			_delay_ms(50);
			if(count==9) count = -1;
  ea:	6f ef       	ldi	r22, 0xFF	; 255
  ec:	7f ef       	ldi	r23, 0xFF	; 255

	PORTA = 0xff;
	PORTE = 0x01;
	PORTD = digit[0];
	while(1) {
		if(!(PINE & 0x40)){
  ee:	0e 99       	sbic	0x01, 6	; 1
  f0:	24 c0       	rjmp	.+72     	; 0x13a <main+0x6a>
			PORTA = ~(0x01 << shift++);
  f2:	80 91 0a 01 	lds	r24, 0x010A
  f6:	90 91 0b 01 	lds	r25, 0x010B
  fa:	9a 01       	movw	r18, r20
  fc:	08 2e       	mov	r0, r24
  fe:	02 c0       	rjmp	.+4      	; 0x104 <main+0x34>
 100:	22 0f       	add	r18, r18
 102:	33 1f       	adc	r19, r19
 104:	0a 94       	dec	r0
 106:	e2 f7       	brpl	.-8      	; 0x100 <main+0x30>
 108:	20 95       	com	r18
 10a:	2b bb       	out	0x1b, r18	; 27
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	90 93 0b 01 	sts	0x010B, r25
 112:	80 93 0a 01 	sts	0x010A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	0f ef       	ldi	r16, 0xFF	; 255
 118:	10 e7       	ldi	r17, 0x70	; 112
 11a:	22 e0       	ldi	r18, 0x02	; 2
 11c:	01 50       	subi	r16, 0x01	; 1
 11e:	10 40       	sbci	r17, 0x00	; 0
 120:	20 40       	sbci	r18, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x4c>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x56>
 126:	00 00       	nop
			_delay_ms(50);
			if(shift == 8) shift=0;
 128:	88 30       	cpi	r24, 0x08	; 8
 12a:	91 05       	cpc	r25, r1
 12c:	21 f4       	brne	.+8      	; 0x136 <main+0x66>
 12e:	10 92 0b 01 	sts	0x010B, r1
 132:	10 92 0a 01 	sts	0x010A, r1
			while(!(PINE & 0x40));
 136:	0e 9b       	sbis	0x01, 6	; 1
 138:	fe cf       	rjmp	.-4      	; 0x136 <main+0x66>
		}
		if(!(PINE & 0x80)){
 13a:	0f 99       	sbic	0x01, 7	; 1
 13c:	d8 cf       	rjmp	.-80     	; 0xee <main+0x1e>
			PORTD = digit[++count];
 13e:	80 91 0c 01 	lds	r24, 0x010C
 142:	90 91 0d 01 	lds	r25, 0x010D
 146:	01 96       	adiw	r24, 0x01	; 1
 148:	90 93 0d 01 	sts	0x010D, r25
 14c:	80 93 0c 01 	sts	0x010C, r24
 150:	fc 01       	movw	r30, r24
 152:	e0 50       	subi	r30, 0x00	; 0
 154:	ff 4f       	sbci	r31, 0xFF	; 255
 156:	20 81       	ld	r18, Z
 158:	22 bb       	out	0x12, r18	; 18
 15a:	0f ef       	ldi	r16, 0xFF	; 255
 15c:	10 e7       	ldi	r17, 0x70	; 112
 15e:	22 e0       	ldi	r18, 0x02	; 2
 160:	01 50       	subi	r16, 0x01	; 1
 162:	10 40       	sbci	r17, 0x00	; 0
 164:	20 40       	sbci	r18, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <main+0x90>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x9a>
 16a:	00 00       	nop
			_delay_ms(50);
			if(count==9) count = -1;
 16c:	89 30       	cpi	r24, 0x09	; 9
 16e:	91 05       	cpc	r25, r1
 170:	21 f4       	brne	.+8      	; 0x17a <main+0xaa>
 172:	70 93 0d 01 	sts	0x010D, r23
 176:	60 93 0c 01 	sts	0x010C, r22
			while(!(PINE&0x80));
 17a:	0f 9b       	sbis	0x01, 7	; 1
 17c:	fe cf       	rjmp	.-4      	; 0x17a <main+0xaa>
 17e:	b7 cf       	rjmp	.-146    	; 0xee <main+0x1e>

00000180 <_exit>:
 180:	f8 94       	cli

00000182 <__stop_program>:
 182:	ff cf       	rjmp	.-2      	; 0x182 <__stop_program>
