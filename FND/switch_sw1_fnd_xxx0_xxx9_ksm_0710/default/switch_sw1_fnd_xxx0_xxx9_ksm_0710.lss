
switch_sw1_fnd_xxx0_xxx9_ksm_0710.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000011e  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010a  0080010a  000001bc  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000910  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000036e  00000000  00000000  00000990  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000c0  00000000  00000000  00000cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000283  00000000  00000000  00000dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001044  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000b9  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001121  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e1       	ldi	r30, 0x1E	; 30
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	aa e0       	ldi	r26, 0x0A	; 10
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	ac 30       	cpi	r26, 0x0C	; 12
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  c8:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <main>:
unsigned char digit[10] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};
int count=0;

int main(void)
{
    DDRD = 0xff;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	81 bb       	out	0x11, r24	; 17
    DDRE = 0x0f;
  d4:	8f e0       	ldi	r24, 0x0F	; 15
  d6:	82 b9       	out	0x02, r24	; 2
    PORTE = 0x01;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	83 b9       	out	0x03, r24	; 3
    PORTD = digit[0];
  dc:	80 91 00 01 	lds	r24, 0x0100
  e0:	82 bb       	out	0x12, r24	; 18
    while (1)
    {
       if(!(PINE & 0x40))           // 스위치 누름을 기다림
      {
          PORTD=digit[++count];
     	  if(count==9) count=-1;
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	3f ef       	ldi	r19, 0xFF	; 255
    DDRE = 0x0f;
    PORTE = 0x01;
    PORTD = digit[0];
    while (1)
    {
       if(!(PINE & 0x40))           // 스위치 누름을 기다림
  e6:	0e 99       	sbic	0x01, 6	; 1
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <main+0x16>
      {
          PORTD=digit[++count];
  ea:	80 91 0a 01 	lds	r24, 0x010A
  ee:	90 91 0b 01 	lds	r25, 0x010B
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	90 93 0b 01 	sts	0x010B, r25
  f8:	80 93 0a 01 	sts	0x010A, r24
  fc:	fc 01       	movw	r30, r24
  fe:	e0 50       	subi	r30, 0x00	; 0
 100:	ff 4f       	sbci	r31, 0xFF	; 255
 102:	40 81       	ld	r20, Z
 104:	42 bb       	out	0x12, r20	; 18
     	  if(count==9) count=-1;
 106:	89 30       	cpi	r24, 0x09	; 9
 108:	91 05       	cpc	r25, r1
 10a:	21 f4       	brne	.+8      	; 0x114 <main+0x44>
 10c:	30 93 0b 01 	sts	0x010B, r19
 110:	20 93 0a 01 	sts	0x010A, r18
     
          while(!(PINE & 0x40));       // 스위치 떨어짐을 기다림
 114:	0e 9b       	sbis	0x01, 6	; 1
 116:	fe cf       	rjmp	.-4      	; 0x114 <main+0x44>
 118:	e6 cf       	rjmp	.-52     	; 0xe6 <main+0x16>

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
