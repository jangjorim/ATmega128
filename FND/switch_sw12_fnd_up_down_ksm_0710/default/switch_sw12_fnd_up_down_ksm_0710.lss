
switch_sw12_fnd_up_down_ksm_0710.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000180  00000214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000180  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010a  0080010a  0000021e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000978  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000454  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000162  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000320  00000000  00000000  00000fae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000012d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000113  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  00001407  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  0000144f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e8       	ldi	r30, 0x80	; 128
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	aa e0       	ldi	r26, 0x0A	; 10
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	ac 30       	cpi	r26, 0x0C	; 12
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  c8:	0c 94 be 00 	jmp	0x17c	; 0x17c <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <main>:
#include <util/delay.h>
unsigned char digit[10] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};
int count=0;

int main(void) {
    DDRD = 0xff;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	81 bb       	out	0x11, r24	; 17
    DDRE = 0x0f;
  d4:	8f e0       	ldi	r24, 0x0F	; 15
  d6:	82 b9       	out	0x02, r24	; 2
    PORTE = 0x01;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	83 b9       	out	0x03, r24	; 3
    PORTD = digit[0];
  dc:	80 91 00 01 	lds	r24, 0x0100
  e0:	82 bb       	out	0x12, r24	; 18
    while (1){
        if(!(PINE & 0x40)) {
            if(count==9) count=-1;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	9f ef       	ldi	r25, 0xFF	; 255
            PORTD=digit[++count], _delay_ms(5);
            while(!(PINE & 0x40));      
        }
        if(!(PINE & 0x80)){          
            if(count==0) count=10;
  e6:	2a e0       	ldi	r18, 0x0A	; 10
  e8:	30 e0       	ldi	r19, 0x00	; 0
    DDRD = 0xff;
    DDRE = 0x0f;
    PORTE = 0x01;
    PORTD = digit[0];
    while (1){
        if(!(PINE & 0x40)) {
  ea:	0e 99       	sbic	0x01, 6	; 1
  ec:	22 c0       	rjmp	.+68     	; 0x132 <main+0x62>
            if(count==9) count=-1;
  ee:	40 91 0a 01 	lds	r20, 0x010A
  f2:	50 91 0b 01 	lds	r21, 0x010B
  f6:	49 30       	cpi	r20, 0x09	; 9
  f8:	51 05       	cpc	r21, r1
  fa:	21 f4       	brne	.+8      	; 0x104 <main+0x34>
  fc:	90 93 0b 01 	sts	0x010B, r25
 100:	80 93 0a 01 	sts	0x010A, r24
            PORTD=digit[++count], _delay_ms(5);
 104:	40 91 0a 01 	lds	r20, 0x010A
 108:	50 91 0b 01 	lds	r21, 0x010B
 10c:	4f 5f       	subi	r20, 0xFF	; 255
 10e:	5f 4f       	sbci	r21, 0xFF	; 255
 110:	50 93 0b 01 	sts	0x010B, r21
 114:	40 93 0a 01 	sts	0x010A, r20
 118:	40 50       	subi	r20, 0x00	; 0
 11a:	5f 4f       	sbci	r21, 0xFF	; 255
 11c:	fa 01       	movw	r30, r20
 11e:	40 81       	ld	r20, Z
 120:	42 bb       	out	0x12, r20	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	ef e1       	ldi	r30, 0x1F	; 31
 124:	fe e4       	ldi	r31, 0x4E	; 78
 126:	31 97       	sbiw	r30, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <main+0x56>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x5c>
 12c:	00 00       	nop
            while(!(PINE & 0x40));      
 12e:	0e 9b       	sbis	0x01, 6	; 1
 130:	fe cf       	rjmp	.-4      	; 0x12e <main+0x5e>
        }
        if(!(PINE & 0x80)){          
 132:	0f 99       	sbic	0x01, 7	; 1
 134:	da cf       	rjmp	.-76     	; 0xea <main+0x1a>
            if(count==0) count=10;
 136:	40 91 0a 01 	lds	r20, 0x010A
 13a:	50 91 0b 01 	lds	r21, 0x010B
 13e:	41 15       	cp	r20, r1
 140:	51 05       	cpc	r21, r1
 142:	21 f4       	brne	.+8      	; 0x14c <main+0x7c>
 144:	30 93 0b 01 	sts	0x010B, r19
 148:	20 93 0a 01 	sts	0x010A, r18
            PORTD=digit[--count], _delay_ms(5);
 14c:	40 91 0a 01 	lds	r20, 0x010A
 150:	50 91 0b 01 	lds	r21, 0x010B
 154:	41 50       	subi	r20, 0x01	; 1
 156:	50 40       	sbci	r21, 0x00	; 0
 158:	50 93 0b 01 	sts	0x010B, r21
 15c:	40 93 0a 01 	sts	0x010A, r20
 160:	40 50       	subi	r20, 0x00	; 0
 162:	5f 4f       	sbci	r21, 0xFF	; 255
 164:	fa 01       	movw	r30, r20
 166:	40 81       	ld	r20, Z
 168:	42 bb       	out	0x12, r20	; 18
 16a:	ef e1       	ldi	r30, 0x1F	; 31
 16c:	fe e4       	ldi	r31, 0x4E	; 78
 16e:	31 97       	sbiw	r30, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <main+0x9e>
 172:	00 c0       	rjmp	.+0      	; 0x174 <main+0xa4>
 174:	00 00       	nop
            while(!(PINE & 0x80));      
 176:	0f 9b       	sbis	0x01, 7	; 1
 178:	fe cf       	rjmp	.-4      	; 0x176 <main+0xa6>
 17a:	b7 cf       	rjmp	.-146    	; 0xea <main+0x1a>

0000017c <_exit>:
 17c:	f8 94       	cli

0000017e <__stop_program>:
 17e:	ff cf       	rjmp	.-2      	; 0x17e <__stop_program>
