
fnd_0000_5959_timer_ksm_0710.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000222  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000222  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080010e  0080010e  000002c4  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000990  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000a18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000527  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000167  00000000  00000000  00000fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000035f  00000000  00000000  00001126  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001488  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000010b  00000000  00000000  000014ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000118  00000000  00000000  000015b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  000016cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e2       	ldi	r30, 0x22	; 34
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	ae e0       	ldi	r26, 0x0E	; 14
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a8 31       	cpi	r26, 0x18	; 24
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  c8:	0c 94 0f 01 	jmp	0x21e	; 0x21e <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <main>:


int i, fnd[4];

int main(){
	DDRD = 0xff;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	81 bb       	out	0x11, r24	; 17
	DDRE = 0x0f;
  d4:	8f e0       	ldi	r24, 0x0F	; 15
  d6:	82 b9       	out	0x02, r24	; 2

	while(1){
		for(i = 0; i < 100; i++){
  d8:	10 92 0f 01 	sts	0x010F, r1
  dc:	10 92 0e 01 	sts	0x010E, r1
  e0:	47 c0       	rjmp	.+142    	; 0x170 <main+0xa0>
			PORTE = latch[0], PORTD = digit[fnd[0]], _delay_ms(2.5);
  e2:	40 91 00 01 	lds	r20, 0x0100
  e6:	43 b9       	out	0x03, r20	; 3
  e8:	2c 5f       	subi	r18, 0xFC	; 252
  ea:	3e 4f       	sbci	r19, 0xFE	; 254
  ec:	f9 01       	movw	r30, r18
  ee:	20 81       	ld	r18, Z
  f0:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	ef e0       	ldi	r30, 0x0F	; 15
  f4:	f7 e2       	ldi	r31, 0x27	; 39
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <main+0x26>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x2c>
  fc:	00 00       	nop
			PORTE = latch[1], PORTD = digit[fnd[1]], _delay_ms(2.5);
  fe:	20 91 01 01 	lds	r18, 0x0101
 102:	23 b9       	out	0x03, r18	; 3
 104:	e0 91 12 01 	lds	r30, 0x0112
 108:	f0 91 13 01 	lds	r31, 0x0113
 10c:	ec 5f       	subi	r30, 0xFC	; 252
 10e:	fe 4f       	sbci	r31, 0xFE	; 254
 110:	20 81       	ld	r18, Z
 112:	22 bb       	out	0x12, r18	; 18
 114:	ef e0       	ldi	r30, 0x0F	; 15
 116:	f7 e2       	ldi	r31, 0x27	; 39
 118:	31 97       	sbiw	r30, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <main+0x48>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x4e>
 11e:	00 00       	nop
			PORTE = latch[2], PORTD = digit[fnd[2]]&0x7f, _delay_ms(2.5);
 120:	20 91 02 01 	lds	r18, 0x0102
 124:	23 b9       	out	0x03, r18	; 3
 126:	e0 91 14 01 	lds	r30, 0x0114
 12a:	f0 91 15 01 	lds	r31, 0x0115
 12e:	ec 5f       	subi	r30, 0xFC	; 252
 130:	fe 4f       	sbci	r31, 0xFE	; 254
 132:	20 81       	ld	r18, Z
 134:	2f 77       	andi	r18, 0x7F	; 127
 136:	22 bb       	out	0x12, r18	; 18
 138:	ef e0       	ldi	r30, 0x0F	; 15
 13a:	f7 e2       	ldi	r31, 0x27	; 39
 13c:	31 97       	sbiw	r30, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <main+0x6c>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x72>
 142:	00 00       	nop
			PORTE = latch[3], PORTD = digit[fnd[3]], _delay_ms(2.5);
 144:	20 91 03 01 	lds	r18, 0x0103
 148:	23 b9       	out	0x03, r18	; 3
 14a:	e0 91 16 01 	lds	r30, 0x0116
 14e:	f0 91 17 01 	lds	r31, 0x0117
 152:	ec 5f       	subi	r30, 0xFC	; 252
 154:	fe 4f       	sbci	r31, 0xFE	; 254
 156:	20 81       	ld	r18, Z
 158:	22 bb       	out	0x12, r18	; 18
 15a:	ef e0       	ldi	r30, 0x0F	; 15
 15c:	f7 e2       	ldi	r31, 0x27	; 39
 15e:	31 97       	sbiw	r30, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <main+0x8e>
 162:	00 c0       	rjmp	.+0      	; 0x164 <main+0x94>
 164:	00 00       	nop
int main(){
	DDRD = 0xff;
	DDRE = 0x0f;

	while(1){
		for(i = 0; i < 100; i++){
 166:	01 96       	adiw	r24, 0x01	; 1
 168:	90 93 0f 01 	sts	0x010F, r25
 16c:	80 93 0e 01 	sts	0x010E, r24
 170:	80 91 0e 01 	lds	r24, 0x010E
 174:	90 91 0f 01 	lds	r25, 0x010F
 178:	20 91 10 01 	lds	r18, 0x0110
 17c:	30 91 11 01 	lds	r19, 0x0111
 180:	84 36       	cpi	r24, 0x64	; 100
 182:	91 05       	cpc	r25, r1
 184:	0c f4       	brge	.+2      	; 0x188 <main+0xb8>
 186:	ad cf       	rjmp	.-166    	; 0xe2 <main+0x12>
			PORTE = latch[0], PORTD = digit[fnd[0]], _delay_ms(2.5);
			PORTE = latch[1], PORTD = digit[fnd[1]], _delay_ms(2.5);
			PORTE = latch[2], PORTD = digit[fnd[2]]&0x7f, _delay_ms(2.5);
			PORTE = latch[3], PORTD = digit[fnd[3]], _delay_ms(2.5);
		}
		fnd[0]++;
 188:	c9 01       	movw	r24, r18
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	90 93 11 01 	sts	0x0111, r25
 190:	80 93 10 01 	sts	0x0110, r24
		if(fnd[0] == 10) fnd[0]=0, fnd[1]++;
 194:	8a 30       	cpi	r24, 0x0A	; 10
 196:	91 05       	cpc	r25, r1
 198:	69 f4       	brne	.+26     	; 0x1b4 <main+0xe4>
 19a:	10 92 11 01 	sts	0x0111, r1
 19e:	10 92 10 01 	sts	0x0110, r1
 1a2:	80 91 12 01 	lds	r24, 0x0112
 1a6:	90 91 13 01 	lds	r25, 0x0113
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	90 93 13 01 	sts	0x0113, r25
 1b0:	80 93 12 01 	sts	0x0112, r24
		if(fnd[1] == 6) fnd[1]=0, fnd[2]++;
 1b4:	80 91 12 01 	lds	r24, 0x0112
 1b8:	90 91 13 01 	lds	r25, 0x0113
 1bc:	86 30       	cpi	r24, 0x06	; 6
 1be:	91 05       	cpc	r25, r1
 1c0:	69 f4       	brne	.+26     	; 0x1dc <main+0x10c>
 1c2:	10 92 13 01 	sts	0x0113, r1
 1c6:	10 92 12 01 	sts	0x0112, r1
 1ca:	80 91 14 01 	lds	r24, 0x0114
 1ce:	90 91 15 01 	lds	r25, 0x0115
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	90 93 15 01 	sts	0x0115, r25
 1d8:	80 93 14 01 	sts	0x0114, r24
		if(fnd[2] == 10) fnd[2]=0, fnd[3]++;
 1dc:	80 91 14 01 	lds	r24, 0x0114
 1e0:	90 91 15 01 	lds	r25, 0x0115
 1e4:	8a 30       	cpi	r24, 0x0A	; 10
 1e6:	91 05       	cpc	r25, r1
 1e8:	69 f4       	brne	.+26     	; 0x204 <main+0x134>
 1ea:	10 92 15 01 	sts	0x0115, r1
 1ee:	10 92 14 01 	sts	0x0114, r1
 1f2:	80 91 16 01 	lds	r24, 0x0116
 1f6:	90 91 17 01 	lds	r25, 0x0117
 1fa:	01 96       	adiw	r24, 0x01	; 1
 1fc:	90 93 17 01 	sts	0x0117, r25
 200:	80 93 16 01 	sts	0x0116, r24
		if(fnd[3] == 6) fnd[3]=0;
 204:	80 91 16 01 	lds	r24, 0x0116
 208:	90 91 17 01 	lds	r25, 0x0117
 20c:	86 30       	cpi	r24, 0x06	; 6
 20e:	91 05       	cpc	r25, r1
 210:	09 f0       	breq	.+2      	; 0x214 <main+0x144>
 212:	62 cf       	rjmp	.-316    	; 0xd8 <main+0x8>
 214:	10 92 17 01 	sts	0x0117, r1
 218:	10 92 16 01 	sts	0x0116, r1
 21c:	5d cf       	rjmp	.-326    	; 0xd8 <main+0x8>

0000021e <_exit>:
 21e:	f8 94       	cli

00000220 <__stop_program>:
 220:	ff cf       	rjmp	.-2      	; 0x220 <__stop_program>
