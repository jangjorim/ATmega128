
switch_fnd_run_stop_ksm_0710.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000021c  000002b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080010e  0080010e  000002be  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000a18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004a8  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000158  00000000  00000000  00000f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000033d  00000000  00000000  00001098  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000013d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000010b  00000000  00000000  000013fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000046  00000000  00000000  00001507  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  0000154d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e1       	ldi	r30, 0x1C	; 28
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	ae e0       	ldi	r26, 0x0E	; 14
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	ac 31       	cpi	r26, 0x1C	; 28
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  c8:	0c 94 0c 01 	jmp	0x218	; 0x218 <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <main>:
unsigned char latch[4] = {0x01, 0x02, 0x04, 0x08};


int run,  i, k, fnd[4];
int main(void) {
	  DDRD = 0xff;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	81 bb       	out	0x11, r24	; 17
	  DDRE = 0x0f;
  d4:	8f e0       	ldi	r24, 0x0F	; 15
  d6:	82 b9       	out	0x02, r24	; 2
	  while (1) {
		  if(!(PINE & 0x40))   run=1;
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	0e 99       	sbic	0x01, 6	; 1
  de:	04 c0       	rjmp	.+8      	; 0xe8 <main+0x18>
  e0:	30 93 13 01 	sts	0x0113, r19
  e4:	20 93 12 01 	sts	0x0112, r18
		  if(!(PINE & 0x80))   run=0;
  e8:	0f 99       	sbic	0x01, 7	; 1
  ea:	04 c0       	rjmp	.+8      	; 0xf4 <main+0x24>
  ec:	10 92 13 01 	sts	0x0113, r1
  f0:	10 92 12 01 	sts	0x0112, r1
		  if(run==1){
  f4:	80 91 12 01 	lds	r24, 0x0112
  f8:	90 91 13 01 	lds	r25, 0x0113
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	91 05       	cpc	r25, r1
 100:	09 f0       	breq	.+2      	; 0x104 <main+0x34>
 102:	4c c0       	rjmp	.+152    	; 0x19c <main+0xcc>
			  fnd[0]++;
 104:	80 91 14 01 	lds	r24, 0x0114
 108:	90 91 15 01 	lds	r25, 0x0115
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	90 93 15 01 	sts	0x0115, r25
 112:	80 93 14 01 	sts	0x0114, r24
			  if(fnd[0]==10) fnd[0]=0, fnd[1]++;
 116:	8a 30       	cpi	r24, 0x0A	; 10
 118:	91 05       	cpc	r25, r1
 11a:	69 f4       	brne	.+26     	; 0x136 <main+0x66>
 11c:	10 92 15 01 	sts	0x0115, r1
 120:	10 92 14 01 	sts	0x0114, r1
 124:	80 91 16 01 	lds	r24, 0x0116
 128:	90 91 17 01 	lds	r25, 0x0117
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	90 93 17 01 	sts	0x0117, r25
 132:	80 93 16 01 	sts	0x0116, r24
			  if(fnd[1]==10) fnd[1]=0, fnd[2]++;
 136:	80 91 16 01 	lds	r24, 0x0116
 13a:	90 91 17 01 	lds	r25, 0x0117
 13e:	8a 30       	cpi	r24, 0x0A	; 10
 140:	91 05       	cpc	r25, r1
 142:	69 f4       	brne	.+26     	; 0x15e <main+0x8e>
 144:	10 92 17 01 	sts	0x0117, r1
 148:	10 92 16 01 	sts	0x0116, r1
 14c:	80 91 18 01 	lds	r24, 0x0118
 150:	90 91 19 01 	lds	r25, 0x0119
 154:	01 96       	adiw	r24, 0x01	; 1
 156:	90 93 19 01 	sts	0x0119, r25
 15a:	80 93 18 01 	sts	0x0118, r24
			  if(fnd[2]==10) fnd[2]=0, fnd[3]++;
 15e:	80 91 18 01 	lds	r24, 0x0118
 162:	90 91 19 01 	lds	r25, 0x0119
 166:	8a 30       	cpi	r24, 0x0A	; 10
 168:	91 05       	cpc	r25, r1
 16a:	69 f4       	brne	.+26     	; 0x186 <main+0xb6>
 16c:	10 92 19 01 	sts	0x0119, r1
 170:	10 92 18 01 	sts	0x0118, r1
 174:	80 91 1a 01 	lds	r24, 0x011A
 178:	90 91 1b 01 	lds	r25, 0x011B
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	90 93 1b 01 	sts	0x011B, r25
 182:	80 93 1a 01 	sts	0x011A, r24
			  if(fnd[3]==10) fnd[3]=0;
 186:	80 91 1a 01 	lds	r24, 0x011A
 18a:	90 91 1b 01 	lds	r25, 0x011B
 18e:	8a 30       	cpi	r24, 0x0A	; 10
 190:	91 05       	cpc	r25, r1
 192:	21 f4       	brne	.+8      	; 0x19c <main+0xcc>
 194:	10 92 1b 01 	sts	0x011B, r1
 198:	10 92 1a 01 	sts	0x011A, r1
		  }
		  for(k=0;k<10;k++) {
 19c:	10 92 0f 01 	sts	0x010F, r1
 1a0:	10 92 0e 01 	sts	0x010E, r1
 1a4:	31 c0       	rjmp	.+98     	; 0x208 <main+0x138>
			  for(i=0 ; i<4 ; i++)
 1a6:	10 92 11 01 	sts	0x0111, r1
 1aa:	10 92 10 01 	sts	0x0110, r1
 1ae:	1c c0       	rjmp	.+56     	; 0x1e8 <main+0x118>
			  	PORTE=latch[i], PORTD=digit[fnd[i]], _delay_ms(2.5);
 1b0:	fc 01       	movw	r30, r24
 1b2:	e0 50       	subi	r30, 0x00	; 0
 1b4:	ff 4f       	sbci	r31, 0xFF	; 255
 1b6:	40 81       	ld	r20, Z
 1b8:	43 b9       	out	0x03, r20	; 3
 1ba:	fc 01       	movw	r30, r24
 1bc:	ee 0f       	add	r30, r30
 1be:	ff 1f       	adc	r31, r31
 1c0:	ec 5e       	subi	r30, 0xEC	; 236
 1c2:	fe 4f       	sbci	r31, 0xFE	; 254
 1c4:	01 90       	ld	r0, Z+
 1c6:	f0 81       	ld	r31, Z
 1c8:	e0 2d       	mov	r30, r0
 1ca:	ec 5f       	subi	r30, 0xFC	; 252
 1cc:	fe 4f       	sbci	r31, 0xFE	; 254
 1ce:	40 81       	ld	r20, Z
 1d0:	42 bb       	out	0x12, r20	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d2:	ef e0       	ldi	r30, 0x0F	; 15
 1d4:	f7 e2       	ldi	r31, 0x27	; 39
 1d6:	31 97       	sbiw	r30, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <main+0x106>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <main+0x10c>
 1dc:	00 00       	nop
			  if(fnd[1]==10) fnd[1]=0, fnd[2]++;
			  if(fnd[2]==10) fnd[2]=0, fnd[3]++;
			  if(fnd[3]==10) fnd[3]=0;
		  }
		  for(k=0;k<10;k++) {
			  for(i=0 ; i<4 ; i++)
 1de:	01 96       	adiw	r24, 0x01	; 1
 1e0:	90 93 11 01 	sts	0x0111, r25
 1e4:	80 93 10 01 	sts	0x0110, r24
 1e8:	80 91 10 01 	lds	r24, 0x0110
 1ec:	90 91 11 01 	lds	r25, 0x0111
 1f0:	84 30       	cpi	r24, 0x04	; 4
 1f2:	91 05       	cpc	r25, r1
 1f4:	ec f2       	brlt	.-70     	; 0x1b0 <main+0xe0>
			  if(fnd[0]==10) fnd[0]=0, fnd[1]++;
			  if(fnd[1]==10) fnd[1]=0, fnd[2]++;
			  if(fnd[2]==10) fnd[2]=0, fnd[3]++;
			  if(fnd[3]==10) fnd[3]=0;
		  }
		  for(k=0;k<10;k++) {
 1f6:	80 91 0e 01 	lds	r24, 0x010E
 1fa:	90 91 0f 01 	lds	r25, 0x010F
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	90 93 0f 01 	sts	0x010F, r25
 204:	80 93 0e 01 	sts	0x010E, r24
 208:	80 91 0e 01 	lds	r24, 0x010E
 20c:	90 91 0f 01 	lds	r25, 0x010F
 210:	8a 30       	cpi	r24, 0x0A	; 10
 212:	91 05       	cpc	r25, r1
 214:	44 f2       	brlt	.-112    	; 0x1a6 <main+0xd6>
 216:	62 cf       	rjmp	.-316    	; 0xdc <main+0xc>

00000218 <_exit>:
 218:	f8 94       	cli

0000021a <__stop_program>:
 21a:	ff cf       	rjmp	.-2      	; 0x21a <__stop_program>
