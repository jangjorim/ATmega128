
Timer_Counter_INT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000136  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000136  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  000001cc  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000088  00000000  00000000  00000920  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000372  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000c1  00000000  00000000  00000d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000281  00000000  00000000  00000ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  0000105c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000ac  00000000  00000000  000010a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  0000114c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001188  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_16>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e3       	ldi	r30, 0x36	; 54
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a2 e0       	ldi	r26, 0x02	; 2
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a3 30       	cpi	r26, 0x03	; 3
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  c8:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <__vector_16>:
        PORTA = LED_Data; // LED_Data를 포트 A로 보낸다.
    }
    return 0;
}

ISR(TIMER0_OVF_vect){
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	8f 93       	push	r24
    SREG=0x00; //cli();
  dc:	1f be       	out	0x3f, r1	; 63
    TCNT0=0xff - 160;
  de:	8f e5       	ldi	r24, 0x5F	; 95
  e0:	82 bf       	out	0x32, r24	; 50
    timer0Cnt++;
  e2:	80 91 02 01 	lds	r24, 0x0102
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	80 93 02 01 	sts	0x0102, r24
    if(timer0Cnt == 100){      // 0.01s * 100 = 1s 1초를 얻기 위한 카운트 횟수
  ec:	84 36       	cpi	r24, 0x64	; 100
  ee:	39 f4       	brne	.+14     	; 0xfe <__vector_16+0x2e>
        LED_Data--;
  f0:	80 91 00 01 	lds	r24, 0x0100
  f4:	81 50       	subi	r24, 0x01	; 1
  f6:	80 93 00 01 	sts	0x0100, r24
        timer0Cnt=0;
  fa:	10 92 02 01 	sts	0x0102, r1
    }
    SREG=0x80;
  fe:	80 e8       	ldi	r24, 0x80	; 128
 100:	8f bf       	out	0x3f, r24	; 63
}
 102:	8f 91       	pop	r24
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <main>:
unsigned char timer0Cnt = 0;

ISR(TIMER0_OVF_vect); //Timer0 Overflow0 ISP

int main(){
    DDRA = 0xFF; 
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	8a bb       	out	0x1a, r24	; 26

    TCCR0 = 0x07; // 1024분주
 112:	87 e0       	ldi	r24, 0x07	; 7
 114:	83 bf       	out	0x33, r24	; 51
    TCNT0 =0xff - 160; 
 116:	8f e5       	ldi	r24, 0x5F	; 95
 118:	82 bf       	out	0x32, r24	; 50
    TIMSK |=1<<TOIE0; // 오버플로우 인터럽트 허용
 11a:	87 b7       	in	r24, 0x37	; 55
 11c:	81 60       	ori	r24, 0x01	; 1
 11e:	87 bf       	out	0x37, r24	; 55
    TIFR |=1<<TOV0; // TOV0 Timer/Counter0 overflow flag 클리어
 120:	86 b7       	in	r24, 0x36	; 54
 122:	81 60       	ori	r24, 0x01	; 1
 124:	86 bf       	out	0x36, r24	; 54

    SREG=0x80;
 126:	80 e8       	ldi	r24, 0x80	; 128
 128:	8f bf       	out	0x3f, r24	; 63

    while(1){
        PORTA = LED_Data; // LED_Data를 포트 A로 보낸다.
 12a:	80 91 00 01 	lds	r24, 0x0100
 12e:	8b bb       	out	0x1b, r24	; 27
 130:	fc cf       	rjmp	.-8      	; 0x12a <main+0x1c>

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
