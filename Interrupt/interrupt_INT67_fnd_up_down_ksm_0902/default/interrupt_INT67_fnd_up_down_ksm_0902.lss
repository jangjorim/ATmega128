
interrupt_INT67_fnd_up_down_ksm_0902.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000001ca  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010a  0080010a  00000268  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000088  00000000  00000000  000009c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000397  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000d3  00000000  00000000  00000ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000029e  00000000  00000000  00000eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00001150  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000d5  00000000  00000000  000011d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c6  00000000  00000000  000012a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000136f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_7>
  20:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_8>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ec       	ldi	r30, 0xCA	; 202
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	aa e0       	ldi	r26, 0x0A	; 10
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	ac 30       	cpi	r26, 0x0C	; 12
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 ca 00 	call	0x194	; 0x194 <main>
  c8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <__vector_7>:
	
	PORTE = 0x01, PORTD = digit[count];
	while(1);
}

ISR(INT6_vect){
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	0b b6       	in	r0, 0x3b	; 59
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
  e2:	ef 93       	push	r30
  e4:	ff 93       	push	r31
	if(count>=9) count= -1;
  e6:	80 91 0a 01 	lds	r24, 0x010A
  ea:	90 91 0b 01 	lds	r25, 0x010B
  ee:	89 30       	cpi	r24, 0x09	; 9
  f0:	91 05       	cpc	r25, r1
  f2:	34 f0       	brlt	.+12     	; 0x100 <__vector_7+0x30>
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	9f ef       	ldi	r25, 0xFF	; 255
  f8:	90 93 0b 01 	sts	0x010B, r25
  fc:	80 93 0a 01 	sts	0x010A, r24
	PORTD=digit[++count];
 100:	80 91 0a 01 	lds	r24, 0x010A
 104:	90 91 0b 01 	lds	r25, 0x010B
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	90 93 0b 01 	sts	0x010B, r25
 10e:	80 93 0a 01 	sts	0x010A, r24
 112:	80 50       	subi	r24, 0x00	; 0
 114:	9f 4f       	sbci	r25, 0xFF	; 255
 116:	fc 01       	movw	r30, r24
 118:	80 81       	ld	r24, Z
 11a:	82 bb       	out	0x12, r24	; 18
}
 11c:	ff 91       	pop	r31
 11e:	ef 91       	pop	r30
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	0f 90       	pop	r0
 126:	0b be       	out	0x3b, r0	; 59
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <__vector_8>:

ISR(INT7_vect){
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	0b b6       	in	r0, 0x3b	; 59
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
 144:	ef 93       	push	r30
 146:	ff 93       	push	r31
	if(count <= 0) count= 10;
 148:	80 91 0a 01 	lds	r24, 0x010A
 14c:	90 91 0b 01 	lds	r25, 0x010B
 150:	18 16       	cp	r1, r24
 152:	19 06       	cpc	r1, r25
 154:	34 f0       	brlt	.+12     	; 0x162 <__vector_8+0x30>
 156:	8a e0       	ldi	r24, 0x0A	; 10
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	90 93 0b 01 	sts	0x010B, r25
 15e:	80 93 0a 01 	sts	0x010A, r24
	PORTD=digit[--count];
 162:	80 91 0a 01 	lds	r24, 0x010A
 166:	90 91 0b 01 	lds	r25, 0x010B
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	90 93 0b 01 	sts	0x010B, r25
 170:	80 93 0a 01 	sts	0x010A, r24
 174:	80 50       	subi	r24, 0x00	; 0
 176:	9f 4f       	sbci	r25, 0xFF	; 255
 178:	fc 01       	movw	r30, r24
 17a:	80 81       	ld	r24, Z
 17c:	82 bb       	out	0x12, r24	; 18

}
 17e:	ff 91       	pop	r31
 180:	ef 91       	pop	r30
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	0f 90       	pop	r0
 188:	0b be       	out	0x3b, r0	; 59
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <main>:
#include <util/delay.h>
unsigned char digit[10] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};
int count = 0;

int main(){
	DDRD = 0xff;
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	81 bb       	out	0x11, r24	; 17
	DDRE = 0x0f;
 198:	8f e0       	ldi	r24, 0x0F	; 15
 19a:	82 b9       	out	0x02, r24	; 2

	SREG = 0x80;
 19c:	80 e8       	ldi	r24, 0x80	; 128
 19e:	8f bf       	out	0x3f, r24	; 63
	EIMSK = 0x40;
 1a0:	80 e4       	ldi	r24, 0x40	; 64
 1a2:	89 bf       	out	0x39, r24	; 57
	EICRB = 0x30;
 1a4:	80 e3       	ldi	r24, 0x30	; 48
 1a6:	8a bf       	out	0x3a, r24	; 58
	EIMSK = 0xC0;
 1a8:	80 ec       	ldi	r24, 0xC0	; 192
 1aa:	89 bf       	out	0x39, r24	; 57
	EICRB = 0xa0;
 1ac:	80 ea       	ldi	r24, 0xA0	; 160
 1ae:	8a bf       	out	0x3a, r24	; 58
	
	PORTE = 0x01, PORTD = digit[count];
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	83 b9       	out	0x03, r24	; 3
 1b4:	e0 91 0a 01 	lds	r30, 0x010A
 1b8:	f0 91 0b 01 	lds	r31, 0x010B
 1bc:	e0 50       	subi	r30, 0x00	; 0
 1be:	ff 4f       	sbci	r31, 0xFF	; 255
 1c0:	80 81       	ld	r24, Z
 1c2:	82 bb       	out	0x12, r24	; 18
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <main+0x30>

000001c6 <_exit>:
 1c6:	f8 94       	cli

000001c8 <__stop_program>:
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <__stop_program>
