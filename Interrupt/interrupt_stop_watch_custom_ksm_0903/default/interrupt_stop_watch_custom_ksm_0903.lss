
interrupt_stop_watch_custom_ksm_0903.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000390  00000424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000390  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080010e  0080010e  00000432  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c8  00000000  00000000  00000b88  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000756  00000000  00000000  00000c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001a4  00000000  00000000  000013a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c5  00000000  00000000  0000154a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00001a10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000147  00000000  00000000  00001adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000270  00000000  00000000  00001c23  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001e93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_5>
  18:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_6>
  1c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_7>
  20:	0c 94 be 00 	jmp	0x17c	; 0x17c <__vector_8>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e9       	ldi	r30, 0x90	; 144
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	ae e0       	ldi	r26, 0x0E	; 14
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	aa 31       	cpi	r26, 0x1A	; 26
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <main>
  c8:	0c 94 c6 01 	jmp	0x38c	; 0x38c <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <__vector_5>:
		}	
	}
}


ISR(INT4_vect){
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
	fnd[2] = fnd[2] + 1;
  de:	80 91 16 01 	lds	r24, 0x0116
  e2:	90 91 17 01 	lds	r25, 0x0117
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	90 93 17 01 	sts	0x0117, r25
  ec:	80 93 16 01 	sts	0x0116, r24
}
  f0:	9f 91       	pop	r25
  f2:	8f 91       	pop	r24
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <__vector_6>:

ISR(INT5_vect){
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
	fnd[3] = fnd[3] + 1;
 10c:	80 91 18 01 	lds	r24, 0x0118
 110:	90 91 19 01 	lds	r25, 0x0119
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	90 93 19 01 	sts	0x0119, r25
 11a:	80 93 18 01 	sts	0x0118, r24
}
 11e:	9f 91       	pop	r25
 120:	8f 91       	pop	r24
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <__vector_7>:

ISR(INT6_vect){
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	5f 93       	push	r21
 138:	6f 93       	push	r22
 13a:	7f 93       	push	r23
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
	run = (run+1)%2;
 144:	80 91 0e 01 	lds	r24, 0x010E
 148:	90 91 0f 01 	lds	r25, 0x010F
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	62 e0       	ldi	r22, 0x02	; 2
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	0e 94 9f 01 	call	0x33e	; 0x33e <__divmodhi4>
 156:	90 93 0f 01 	sts	0x010F, r25
 15a:	80 93 0e 01 	sts	0x010E, r24
	PORTA = ~PORTA;
 15e:	8b b3       	in	r24, 0x1b	; 27
 160:	80 95       	com	r24
 162:	8b bb       	out	0x1b, r24	; 27
}
 164:	bf 91       	pop	r27
 166:	af 91       	pop	r26
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	7f 91       	pop	r23
 16e:	6f 91       	pop	r22
 170:	5f 91       	pop	r21
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <__vector_8>:

ISR(INT7_vect){
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	8f 93       	push	r24
	fnd[0] = 0, fnd[1] = 0,fnd[2] = 0, fnd[3] = 0 , run=0;
 188:	10 92 13 01 	sts	0x0113, r1
 18c:	10 92 12 01 	sts	0x0112, r1
 190:	10 92 15 01 	sts	0x0115, r1
 194:	10 92 14 01 	sts	0x0114, r1
 198:	10 92 17 01 	sts	0x0117, r1
 19c:	10 92 16 01 	sts	0x0116, r1
 1a0:	10 92 19 01 	sts	0x0119, r1
 1a4:	10 92 18 01 	sts	0x0118, r1
 1a8:	10 92 0f 01 	sts	0x010F, r1
 1ac:	10 92 0e 01 	sts	0x010E, r1
	PORTA = 0xff;
 1b0:	8f ef       	ldi	r24, 0xFF	; 255
 1b2:	8b bb       	out	0x1b, r24	; 27
}
 1b4:	8f 91       	pop	r24
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <main>:
unsigned char digit[10] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};
unsigned char latch[4] = { 0x01, 0x02, 0x04, 0x08 };
int run = 0, fnd[4], i;

int main(){
	DDRA = 0xff;
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0xff;
 1c4:	81 bb       	out	0x11, r24	; 17
	DDRE = 0x0f;
 1c6:	9f e0       	ldi	r25, 0x0F	; 15
 1c8:	92 b9       	out	0x02, r25	; 2

	SREG = 0x80;
 1ca:	90 e8       	ldi	r25, 0x80	; 128
 1cc:	9f bf       	out	0x3f, r25	; 63
	EIMSK = 0x40;
 1ce:	90 e4       	ldi	r25, 0x40	; 64
 1d0:	99 bf       	out	0x39, r25	; 57
	EICRB = 0x30;
 1d2:	90 e3       	ldi	r25, 0x30	; 48
 1d4:	9a bf       	out	0x3a, r25	; 58
	EIMSK = 0xf0;
 1d6:	90 ef       	ldi	r25, 0xF0	; 240
 1d8:	99 bf       	out	0x39, r25	; 57
	EICRB = 0xaa;
 1da:	9a ea       	ldi	r25, 0xAA	; 170
 1dc:	9a bf       	out	0x3a, r25	; 58
	
	PORTA = 0xff;
 1de:	8b bb       	out	0x1b, r24	; 27

	while (1){
		
		if(run == 1) fnd[0]++;
 1e0:	80 91 0e 01 	lds	r24, 0x010E
 1e4:	90 91 0f 01 	lds	r25, 0x010F
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	91 05       	cpc	r25, r1
 1ec:	49 f4       	brne	.+18     	; 0x200 <main+0x40>
 1ee:	80 91 12 01 	lds	r24, 0x0112
 1f2:	90 91 13 01 	lds	r25, 0x0113
 1f6:	01 96       	adiw	r24, 0x01	; 1
 1f8:	90 93 13 01 	sts	0x0113, r25
 1fc:	80 93 12 01 	sts	0x0112, r24

		if(fnd[0] == 10) fnd[0]=0, fnd[1]++;
 200:	80 91 12 01 	lds	r24, 0x0112
 204:	90 91 13 01 	lds	r25, 0x0113
 208:	8a 30       	cpi	r24, 0x0A	; 10
 20a:	91 05       	cpc	r25, r1
 20c:	69 f4       	brne	.+26     	; 0x228 <main+0x68>
 20e:	10 92 13 01 	sts	0x0113, r1
 212:	10 92 12 01 	sts	0x0112, r1
 216:	80 91 14 01 	lds	r24, 0x0114
 21a:	90 91 15 01 	lds	r25, 0x0115
 21e:	01 96       	adiw	r24, 0x01	; 1
 220:	90 93 15 01 	sts	0x0115, r25
 224:	80 93 14 01 	sts	0x0114, r24
		if(fnd[1] == 6) fnd[1]=0, fnd[2]++;
 228:	80 91 14 01 	lds	r24, 0x0114
 22c:	90 91 15 01 	lds	r25, 0x0115
 230:	86 30       	cpi	r24, 0x06	; 6
 232:	91 05       	cpc	r25, r1
 234:	69 f4       	brne	.+26     	; 0x250 <main+0x90>
 236:	10 92 15 01 	sts	0x0115, r1
 23a:	10 92 14 01 	sts	0x0114, r1
 23e:	80 91 16 01 	lds	r24, 0x0116
 242:	90 91 17 01 	lds	r25, 0x0117
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	90 93 17 01 	sts	0x0117, r25
 24c:	80 93 16 01 	sts	0x0116, r24
		if(fnd[2] == 10) fnd[2]=0, fnd[3]++;
 250:	80 91 16 01 	lds	r24, 0x0116
 254:	90 91 17 01 	lds	r25, 0x0117
 258:	8a 30       	cpi	r24, 0x0A	; 10
 25a:	91 05       	cpc	r25, r1
 25c:	69 f4       	brne	.+26     	; 0x278 <main+0xb8>
 25e:	10 92 17 01 	sts	0x0117, r1
 262:	10 92 16 01 	sts	0x0116, r1
 266:	80 91 18 01 	lds	r24, 0x0118
 26a:	90 91 19 01 	lds	r25, 0x0119
 26e:	01 96       	adiw	r24, 0x01	; 1
 270:	90 93 19 01 	sts	0x0119, r25
 274:	80 93 18 01 	sts	0x0118, r24
		if(fnd[3] == 6) fnd[3]=0;
 278:	80 91 18 01 	lds	r24, 0x0118
 27c:	90 91 19 01 	lds	r25, 0x0119
 280:	86 30       	cpi	r24, 0x06	; 6
 282:	91 05       	cpc	r25, r1
 284:	21 f4       	brne	.+8      	; 0x28e <main+0xce>
 286:	10 92 19 01 	sts	0x0119, r1
 28a:	10 92 18 01 	sts	0x0118, r1

		for(i = 0 ; i < 10; i++){
 28e:	10 92 11 01 	sts	0x0111, r1
 292:	10 92 10 01 	sts	0x0110, r1
 296:	4a c0       	rjmp	.+148    	; 0x32c <main+0x16c>
			PORTE = latch[0], PORTD = digit[fnd[0]], _delay_ms(2.5);
 298:	20 91 00 01 	lds	r18, 0x0100
 29c:	23 b9       	out	0x03, r18	; 3
 29e:	e0 91 12 01 	lds	r30, 0x0112
 2a2:	f0 91 13 01 	lds	r31, 0x0113
 2a6:	ec 5f       	subi	r30, 0xFC	; 252
 2a8:	fe 4f       	sbci	r31, 0xFE	; 254
 2aa:	20 81       	ld	r18, Z
 2ac:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ae:	ef e0       	ldi	r30, 0x0F	; 15
 2b0:	f7 e2       	ldi	r31, 0x27	; 39
 2b2:	31 97       	sbiw	r30, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <main+0xf2>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <main+0xf8>
 2b8:	00 00       	nop
			PORTE = latch[1], PORTD = digit[fnd[1]], _delay_ms(2.5);
 2ba:	20 91 01 01 	lds	r18, 0x0101
 2be:	23 b9       	out	0x03, r18	; 3
 2c0:	e0 91 14 01 	lds	r30, 0x0114
 2c4:	f0 91 15 01 	lds	r31, 0x0115
 2c8:	ec 5f       	subi	r30, 0xFC	; 252
 2ca:	fe 4f       	sbci	r31, 0xFE	; 254
 2cc:	20 81       	ld	r18, Z
 2ce:	22 bb       	out	0x12, r18	; 18
 2d0:	ef e0       	ldi	r30, 0x0F	; 15
 2d2:	f7 e2       	ldi	r31, 0x27	; 39
 2d4:	31 97       	sbiw	r30, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <main+0x114>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <main+0x11a>
 2da:	00 00       	nop
			PORTE = latch[2], PORTD = digit[fnd[2]]&0x7f, _delay_ms(2.5);
 2dc:	20 91 02 01 	lds	r18, 0x0102
 2e0:	23 b9       	out	0x03, r18	; 3
 2e2:	e0 91 16 01 	lds	r30, 0x0116
 2e6:	f0 91 17 01 	lds	r31, 0x0117
 2ea:	ec 5f       	subi	r30, 0xFC	; 252
 2ec:	fe 4f       	sbci	r31, 0xFE	; 254
 2ee:	20 81       	ld	r18, Z
 2f0:	2f 77       	andi	r18, 0x7F	; 127
 2f2:	22 bb       	out	0x12, r18	; 18
 2f4:	ef e0       	ldi	r30, 0x0F	; 15
 2f6:	f7 e2       	ldi	r31, 0x27	; 39
 2f8:	31 97       	sbiw	r30, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <main+0x138>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <main+0x13e>
 2fe:	00 00       	nop
			PORTE = latch[3], PORTD = digit[fnd[3]], _delay_ms(2.5);
 300:	20 91 03 01 	lds	r18, 0x0103
 304:	23 b9       	out	0x03, r18	; 3
 306:	e0 91 18 01 	lds	r30, 0x0118
 30a:	f0 91 19 01 	lds	r31, 0x0119
 30e:	ec 5f       	subi	r30, 0xFC	; 252
 310:	fe 4f       	sbci	r31, 0xFE	; 254
 312:	20 81       	ld	r18, Z
 314:	22 bb       	out	0x12, r18	; 18
 316:	ef e0       	ldi	r30, 0x0F	; 15
 318:	f7 e2       	ldi	r31, 0x27	; 39
 31a:	31 97       	sbiw	r30, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <main+0x15a>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <main+0x160>
 320:	00 00       	nop
		if(fnd[0] == 10) fnd[0]=0, fnd[1]++;
		if(fnd[1] == 6) fnd[1]=0, fnd[2]++;
		if(fnd[2] == 10) fnd[2]=0, fnd[3]++;
		if(fnd[3] == 6) fnd[3]=0;

		for(i = 0 ; i < 10; i++){
 322:	01 96       	adiw	r24, 0x01	; 1
 324:	90 93 11 01 	sts	0x0111, r25
 328:	80 93 10 01 	sts	0x0110, r24
 32c:	80 91 10 01 	lds	r24, 0x0110
 330:	90 91 11 01 	lds	r25, 0x0111
 334:	8a 30       	cpi	r24, 0x0A	; 10
 336:	91 05       	cpc	r25, r1
 338:	0c f4       	brge	.+2      	; 0x33c <main+0x17c>
 33a:	ae cf       	rjmp	.-164    	; 0x298 <main+0xd8>
 33c:	51 cf       	rjmp	.-350    	; 0x1e0 <main+0x20>

0000033e <__divmodhi4>:
 33e:	97 fb       	bst	r25, 7
 340:	09 2e       	mov	r0, r25
 342:	07 26       	eor	r0, r23
 344:	0a d0       	rcall	.+20     	; 0x35a <__divmodhi4_neg1>
 346:	77 fd       	sbrc	r23, 7
 348:	04 d0       	rcall	.+8      	; 0x352 <__divmodhi4_neg2>
 34a:	0c d0       	rcall	.+24     	; 0x364 <__udivmodhi4>
 34c:	06 d0       	rcall	.+12     	; 0x35a <__divmodhi4_neg1>
 34e:	00 20       	and	r0, r0
 350:	1a f4       	brpl	.+6      	; 0x358 <__divmodhi4_exit>

00000352 <__divmodhi4_neg2>:
 352:	70 95       	com	r23
 354:	61 95       	neg	r22
 356:	7f 4f       	sbci	r23, 0xFF	; 255

00000358 <__divmodhi4_exit>:
 358:	08 95       	ret

0000035a <__divmodhi4_neg1>:
 35a:	f6 f7       	brtc	.-4      	; 0x358 <__divmodhi4_exit>
 35c:	90 95       	com	r25
 35e:	81 95       	neg	r24
 360:	9f 4f       	sbci	r25, 0xFF	; 255
 362:	08 95       	ret

00000364 <__udivmodhi4>:
 364:	aa 1b       	sub	r26, r26
 366:	bb 1b       	sub	r27, r27
 368:	51 e1       	ldi	r21, 0x11	; 17
 36a:	07 c0       	rjmp	.+14     	; 0x37a <__udivmodhi4_ep>

0000036c <__udivmodhi4_loop>:
 36c:	aa 1f       	adc	r26, r26
 36e:	bb 1f       	adc	r27, r27
 370:	a6 17       	cp	r26, r22
 372:	b7 07       	cpc	r27, r23
 374:	10 f0       	brcs	.+4      	; 0x37a <__udivmodhi4_ep>
 376:	a6 1b       	sub	r26, r22
 378:	b7 0b       	sbc	r27, r23

0000037a <__udivmodhi4_ep>:
 37a:	88 1f       	adc	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	5a 95       	dec	r21
 380:	a9 f7       	brne	.-22     	; 0x36c <__udivmodhi4_loop>
 382:	80 95       	com	r24
 384:	90 95       	com	r25
 386:	bc 01       	movw	r22, r24
 388:	cd 01       	movw	r24, r26
 38a:	08 95       	ret

0000038c <_exit>:
 38c:	f8 94       	cli

0000038e <__stop_program>:
 38e:	ff cf       	rjmp	.-2      	; 0x38e <__stop_program>
