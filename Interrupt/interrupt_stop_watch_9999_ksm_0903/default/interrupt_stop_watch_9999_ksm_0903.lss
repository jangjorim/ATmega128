
interrupt_stop_watch_9999_ksm_0903.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000003f6  0000048a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800112  00800112  0000049c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000049c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c8  00000000  00000000  00000bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000078d  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001ad  00000000  00000000  00001445  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000495  00000000  00000000  000015f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001a88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000014d  00000000  00000000  00001b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000107  00000000  00000000  00001c71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001d78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_7>
  20:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__vector_8>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ef       	ldi	r30, 0xF6	; 246
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a2 e1       	ldi	r26, 0x12	; 18
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	aa 32       	cpi	r26, 0x2A	; 42
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  c8:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <__vector_7>:
		PORTE = latch[3], PORTD = digit[fnd1000], _delay_ms(2.5);

	}
}

ISR(INT6_vect){
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	0b b6       	in	r0, 0x3b	; 59
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	2f 93       	push	r18
  e0:	3f 93       	push	r19
  e2:	4f 93       	push	r20
  e4:	5f 93       	push	r21
  e6:	6f 93       	push	r22
  e8:	7f 93       	push	r23
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	af 93       	push	r26
  f0:	bf 93       	push	r27
  f2:	ef 93       	push	r30
  f4:	ff 93       	push	r31
	run = (run+1)%2;
  f6:	80 91 12 01 	lds	r24, 0x0112
  fa:	90 91 13 01 	lds	r25, 0x0113
  fe:	a0 91 14 01 	lds	r26, 0x0114
 102:	b0 91 15 01 	lds	r27, 0x0115
 106:	01 96       	adiw	r24, 0x01	; 1
 108:	a1 1d       	adc	r26, r1
 10a:	b1 1d       	adc	r27, r1
 10c:	bc 01       	movw	r22, r24
 10e:	cd 01       	movw	r24, r26
 110:	22 e0       	ldi	r18, 0x02	; 2
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	40 e0       	ldi	r20, 0x00	; 0
 116:	50 e0       	ldi	r21, 0x00	; 0
 118:	0e 94 bc 01 	call	0x378	; 0x378 <__divmodsi4>
 11c:	dc 01       	movw	r26, r24
 11e:	cb 01       	movw	r24, r22
 120:	80 93 12 01 	sts	0x0112, r24
 124:	90 93 13 01 	sts	0x0113, r25
 128:	a0 93 14 01 	sts	0x0114, r26
 12c:	b0 93 15 01 	sts	0x0115, r27
	PORTA = ~PORTA;
 130:	8b b3       	in	r24, 0x1b	; 27
 132:	80 95       	com	r24
 134:	8b bb       	out	0x1b, r24	; 27
}
 136:	ff 91       	pop	r31
 138:	ef 91       	pop	r30
 13a:	bf 91       	pop	r27
 13c:	af 91       	pop	r26
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	7f 91       	pop	r23
 144:	6f 91       	pop	r22
 146:	5f 91       	pop	r21
 148:	4f 91       	pop	r20
 14a:	3f 91       	pop	r19
 14c:	2f 91       	pop	r18
 14e:	0f 90       	pop	r0
 150:	0b be       	out	0x3b, r0	; 59
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <__vector_8>:

ISR(INT7_vect){
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	8f 93       	push	r24
	count=0, run=0;
 168:	10 92 00 01 	sts	0x0100, r1
 16c:	10 92 01 01 	sts	0x0101, r1
 170:	10 92 02 01 	sts	0x0102, r1
 174:	10 92 03 01 	sts	0x0103, r1
 178:	10 92 12 01 	sts	0x0112, r1
 17c:	10 92 13 01 	sts	0x0113, r1
 180:	10 92 14 01 	sts	0x0114, r1
 184:	10 92 15 01 	sts	0x0115, r1
	PORTA = 0xff;
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	8b bb       	out	0x1b, r24	; 27
}
 18c:	8f 91       	pop	r24
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <main>:
unsigned char digit[10] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};
unsigned char latch[4] = { 0x01, 0x02, 0x04, 0x08 };
long count = 99500,i, run = 0, fnd1, fnd10, fnd100, fnd1000;

int main(){
	DDRA = 0xff;
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0xff;
 19c:	81 bb       	out	0x11, r24	; 17
	DDRE = 0x0f;
 19e:	9f e0       	ldi	r25, 0x0F	; 15
 1a0:	92 b9       	out	0x02, r25	; 2

	SREG = 0x80;
 1a2:	90 e8       	ldi	r25, 0x80	; 128
 1a4:	9f bf       	out	0x3f, r25	; 63
	EIMSK = 0xC0;
 1a6:	90 ec       	ldi	r25, 0xC0	; 192
 1a8:	99 bf       	out	0x39, r25	; 57
	EICRB = 0xa0;
 1aa:	90 ea       	ldi	r25, 0xA0	; 160
 1ac:	9a bf       	out	0x3a, r25	; 58
	
	PORTA = 0xff;
 1ae:	8b bb       	out	0x1b, r24	; 27

	while (1){
		
		if(run == 1) count++;
		if (count >= 100000) count = 0;
		fnd1 = (count/10)%10;
 1b0:	8a e0       	ldi	r24, 0x0A	; 10
 1b2:	88 2e       	mov	r8, r24
 1b4:	91 2c       	mov	r9, r1
 1b6:	a1 2c       	mov	r10, r1
 1b8:	b1 2c       	mov	r11, r1
		fnd10 = (count/100) % 10;
 1ba:	94 e6       	ldi	r25, 0x64	; 100
 1bc:	29 2e       	mov	r2, r25
 1be:	31 2c       	mov	r3, r1
 1c0:	41 2c       	mov	r4, r1
 1c2:	51 2c       	mov	r5, r1
	
	PORTA = 0xff;

	while (1){
		
		if(run == 1) count++;
 1c4:	80 91 12 01 	lds	r24, 0x0112
 1c8:	90 91 13 01 	lds	r25, 0x0113
 1cc:	a0 91 14 01 	lds	r26, 0x0114
 1d0:	b0 91 15 01 	lds	r27, 0x0115
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	91 05       	cpc	r25, r1
 1d8:	a1 05       	cpc	r26, r1
 1da:	b1 05       	cpc	r27, r1
 1dc:	99 f4       	brne	.+38     	; 0x204 <main+0x6c>
 1de:	80 91 00 01 	lds	r24, 0x0100
 1e2:	90 91 01 01 	lds	r25, 0x0101
 1e6:	a0 91 02 01 	lds	r26, 0x0102
 1ea:	b0 91 03 01 	lds	r27, 0x0103
 1ee:	01 96       	adiw	r24, 0x01	; 1
 1f0:	a1 1d       	adc	r26, r1
 1f2:	b1 1d       	adc	r27, r1
 1f4:	80 93 00 01 	sts	0x0100, r24
 1f8:	90 93 01 01 	sts	0x0101, r25
 1fc:	a0 93 02 01 	sts	0x0102, r26
 200:	b0 93 03 01 	sts	0x0103, r27
		if (count >= 100000) count = 0;
 204:	80 91 00 01 	lds	r24, 0x0100
 208:	90 91 01 01 	lds	r25, 0x0101
 20c:	a0 91 02 01 	lds	r26, 0x0102
 210:	b0 91 03 01 	lds	r27, 0x0103
 214:	80 3a       	cpi	r24, 0xA0	; 160
 216:	26 e8       	ldi	r18, 0x86	; 134
 218:	92 07       	cpc	r25, r18
 21a:	21 e0       	ldi	r18, 0x01	; 1
 21c:	a2 07       	cpc	r26, r18
 21e:	20 e0       	ldi	r18, 0x00	; 0
 220:	b2 07       	cpc	r27, r18
 222:	44 f0       	brlt	.+16     	; 0x234 <main+0x9c>
 224:	10 92 00 01 	sts	0x0100, r1
 228:	10 92 01 01 	sts	0x0101, r1
 22c:	10 92 02 01 	sts	0x0102, r1
 230:	10 92 03 01 	sts	0x0103, r1
		fnd1 = (count/10)%10;
 234:	c0 90 00 01 	lds	r12, 0x0100
 238:	d0 90 01 01 	lds	r13, 0x0101
 23c:	e0 90 02 01 	lds	r14, 0x0102
 240:	f0 90 03 01 	lds	r15, 0x0103
 244:	c7 01       	movw	r24, r14
 246:	b6 01       	movw	r22, r12
 248:	a5 01       	movw	r20, r10
 24a:	94 01       	movw	r18, r8
 24c:	0e 94 bc 01 	call	0x378	; 0x378 <__divmodsi4>
 250:	ca 01       	movw	r24, r20
 252:	b9 01       	movw	r22, r18
 254:	a5 01       	movw	r20, r10
 256:	94 01       	movw	r18, r8
 258:	0e 94 bc 01 	call	0x378	; 0x378 <__divmodsi4>
 25c:	dc 01       	movw	r26, r24
 25e:	cb 01       	movw	r24, r22
 260:	3c 01       	movw	r6, r24
 262:	80 93 26 01 	sts	0x0126, r24
 266:	90 93 27 01 	sts	0x0127, r25
 26a:	a0 93 28 01 	sts	0x0128, r26
 26e:	b0 93 29 01 	sts	0x0129, r27
		fnd10 = (count/100) % 10;
 272:	c7 01       	movw	r24, r14
 274:	b6 01       	movw	r22, r12
 276:	a2 01       	movw	r20, r4
 278:	91 01       	movw	r18, r2
 27a:	0e 94 bc 01 	call	0x378	; 0x378 <__divmodsi4>
 27e:	ca 01       	movw	r24, r20
 280:	b9 01       	movw	r22, r18
 282:	a5 01       	movw	r20, r10
 284:	94 01       	movw	r18, r8
 286:	0e 94 bc 01 	call	0x378	; 0x378 <__divmodsi4>
 28a:	dc 01       	movw	r26, r24
 28c:	cb 01       	movw	r24, r22
 28e:	8c 01       	movw	r16, r24
 290:	80 93 22 01 	sts	0x0122, r24
 294:	90 93 23 01 	sts	0x0123, r25
 298:	a0 93 24 01 	sts	0x0124, r26
 29c:	b0 93 25 01 	sts	0x0125, r27
		fnd100 = (count/1000) % 10;
 2a0:	c7 01       	movw	r24, r14
 2a2:	b6 01       	movw	r22, r12
 2a4:	28 ee       	ldi	r18, 0xE8	; 232
 2a6:	33 e0       	ldi	r19, 0x03	; 3
 2a8:	40 e0       	ldi	r20, 0x00	; 0
 2aa:	50 e0       	ldi	r21, 0x00	; 0
 2ac:	0e 94 bc 01 	call	0x378	; 0x378 <__divmodsi4>
 2b0:	ca 01       	movw	r24, r20
 2b2:	b9 01       	movw	r22, r18
 2b4:	a5 01       	movw	r20, r10
 2b6:	94 01       	movw	r18, r8
 2b8:	0e 94 bc 01 	call	0x378	; 0x378 <__divmodsi4>
 2bc:	dc 01       	movw	r26, r24
 2be:	cb 01       	movw	r24, r22
 2c0:	ec 01       	movw	r28, r24
 2c2:	80 93 1a 01 	sts	0x011A, r24
 2c6:	90 93 1b 01 	sts	0x011B, r25
 2ca:	a0 93 1c 01 	sts	0x011C, r26
 2ce:	b0 93 1d 01 	sts	0x011D, r27
		fnd1000 = (count/10000) % 10;
 2d2:	c7 01       	movw	r24, r14
 2d4:	b6 01       	movw	r22, r12
 2d6:	20 e1       	ldi	r18, 0x10	; 16
 2d8:	37 e2       	ldi	r19, 0x27	; 39
 2da:	40 e0       	ldi	r20, 0x00	; 0
 2dc:	50 e0       	ldi	r21, 0x00	; 0
 2de:	0e 94 bc 01 	call	0x378	; 0x378 <__divmodsi4>
 2e2:	ca 01       	movw	r24, r20
 2e4:	b9 01       	movw	r22, r18
 2e6:	a5 01       	movw	r20, r10
 2e8:	94 01       	movw	r18, r8
 2ea:	0e 94 bc 01 	call	0x378	; 0x378 <__divmodsi4>
 2ee:	dc 01       	movw	r26, r24
 2f0:	cb 01       	movw	r24, r22
 2f2:	fc 01       	movw	r30, r24
 2f4:	80 93 16 01 	sts	0x0116, r24
 2f8:	90 93 17 01 	sts	0x0117, r25
 2fc:	a0 93 18 01 	sts	0x0118, r26
 300:	b0 93 19 01 	sts	0x0119, r27
		
		PORTE = latch[0], PORTD = digit[fnd1], _delay_ms(2.5);
 304:	80 91 04 01 	lds	r24, 0x0104
 308:	83 b9       	out	0x03, r24	; 3
 30a:	88 e0       	ldi	r24, 0x08	; 8
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	68 0e       	add	r6, r24
 310:	79 1e       	adc	r7, r25
 312:	d3 01       	movw	r26, r6
 314:	8c 91       	ld	r24, X
 316:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 318:	8f e0       	ldi	r24, 0x0F	; 15
 31a:	97 e2       	ldi	r25, 0x27	; 39
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <main+0x184>
 320:	00 c0       	rjmp	.+0      	; 0x322 <main+0x18a>
 322:	00 00       	nop
		PORTE = latch[1], PORTD = digit[fnd10], _delay_ms(2.5);
 324:	80 91 05 01 	lds	r24, 0x0105
 328:	83 b9       	out	0x03, r24	; 3
 32a:	08 5f       	subi	r16, 0xF8	; 248
 32c:	1e 4f       	sbci	r17, 0xFE	; 254
 32e:	d8 01       	movw	r26, r16
 330:	8c 91       	ld	r24, X
 332:	82 bb       	out	0x12, r24	; 18
 334:	8f e0       	ldi	r24, 0x0F	; 15
 336:	97 e2       	ldi	r25, 0x27	; 39
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	f1 f7       	brne	.-4      	; 0x338 <main+0x1a0>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <main+0x1a6>
 33e:	00 00       	nop
		PORTE = latch[2], PORTD = digit[fnd100]&0x7f, _delay_ms(2.5);
 340:	80 91 06 01 	lds	r24, 0x0106
 344:	83 b9       	out	0x03, r24	; 3
 346:	c8 5f       	subi	r28, 0xF8	; 248
 348:	de 4f       	sbci	r29, 0xFE	; 254
 34a:	88 81       	ld	r24, Y
 34c:	8f 77       	andi	r24, 0x7F	; 127
 34e:	82 bb       	out	0x12, r24	; 18
 350:	af e0       	ldi	r26, 0x0F	; 15
 352:	b7 e2       	ldi	r27, 0x27	; 39
 354:	11 97       	sbiw	r26, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <main+0x1bc>
 358:	00 c0       	rjmp	.+0      	; 0x35a <main+0x1c2>
 35a:	00 00       	nop
		PORTE = latch[3], PORTD = digit[fnd1000], _delay_ms(2.5);
 35c:	80 91 07 01 	lds	r24, 0x0107
 360:	83 b9       	out	0x03, r24	; 3
 362:	e8 5f       	subi	r30, 0xF8	; 248
 364:	fe 4f       	sbci	r31, 0xFE	; 254
 366:	80 81       	ld	r24, Z
 368:	82 bb       	out	0x12, r24	; 18
 36a:	8f e0       	ldi	r24, 0x0F	; 15
 36c:	97 e2       	ldi	r25, 0x27	; 39
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <main+0x1d6>
 372:	00 c0       	rjmp	.+0      	; 0x374 <main+0x1dc>
 374:	00 00       	nop
 376:	26 cf       	rjmp	.-436    	; 0x1c4 <main+0x2c>

00000378 <__divmodsi4>:
 378:	97 fb       	bst	r25, 7
 37a:	09 2e       	mov	r0, r25
 37c:	05 26       	eor	r0, r21
 37e:	0e d0       	rcall	.+28     	; 0x39c <__divmodsi4_neg1>
 380:	57 fd       	sbrc	r21, 7
 382:	04 d0       	rcall	.+8      	; 0x38c <__divmodsi4_neg2>
 384:	14 d0       	rcall	.+40     	; 0x3ae <__udivmodsi4>
 386:	0a d0       	rcall	.+20     	; 0x39c <__divmodsi4_neg1>
 388:	00 1c       	adc	r0, r0
 38a:	38 f4       	brcc	.+14     	; 0x39a <__divmodsi4_exit>

0000038c <__divmodsi4_neg2>:
 38c:	50 95       	com	r21
 38e:	40 95       	com	r20
 390:	30 95       	com	r19
 392:	21 95       	neg	r18
 394:	3f 4f       	sbci	r19, 0xFF	; 255
 396:	4f 4f       	sbci	r20, 0xFF	; 255
 398:	5f 4f       	sbci	r21, 0xFF	; 255

0000039a <__divmodsi4_exit>:
 39a:	08 95       	ret

0000039c <__divmodsi4_neg1>:
 39c:	f6 f7       	brtc	.-4      	; 0x39a <__divmodsi4_exit>
 39e:	90 95       	com	r25
 3a0:	80 95       	com	r24
 3a2:	70 95       	com	r23
 3a4:	61 95       	neg	r22
 3a6:	7f 4f       	sbci	r23, 0xFF	; 255
 3a8:	8f 4f       	sbci	r24, 0xFF	; 255
 3aa:	9f 4f       	sbci	r25, 0xFF	; 255
 3ac:	08 95       	ret

000003ae <__udivmodsi4>:
 3ae:	a1 e2       	ldi	r26, 0x21	; 33
 3b0:	1a 2e       	mov	r1, r26
 3b2:	aa 1b       	sub	r26, r26
 3b4:	bb 1b       	sub	r27, r27
 3b6:	fd 01       	movw	r30, r26
 3b8:	0d c0       	rjmp	.+26     	; 0x3d4 <__udivmodsi4_ep>

000003ba <__udivmodsi4_loop>:
 3ba:	aa 1f       	adc	r26, r26
 3bc:	bb 1f       	adc	r27, r27
 3be:	ee 1f       	adc	r30, r30
 3c0:	ff 1f       	adc	r31, r31
 3c2:	a2 17       	cp	r26, r18
 3c4:	b3 07       	cpc	r27, r19
 3c6:	e4 07       	cpc	r30, r20
 3c8:	f5 07       	cpc	r31, r21
 3ca:	20 f0       	brcs	.+8      	; 0x3d4 <__udivmodsi4_ep>
 3cc:	a2 1b       	sub	r26, r18
 3ce:	b3 0b       	sbc	r27, r19
 3d0:	e4 0b       	sbc	r30, r20
 3d2:	f5 0b       	sbc	r31, r21

000003d4 <__udivmodsi4_ep>:
 3d4:	66 1f       	adc	r22, r22
 3d6:	77 1f       	adc	r23, r23
 3d8:	88 1f       	adc	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	1a 94       	dec	r1
 3de:	69 f7       	brne	.-38     	; 0x3ba <__udivmodsi4_loop>
 3e0:	60 95       	com	r22
 3e2:	70 95       	com	r23
 3e4:	80 95       	com	r24
 3e6:	90 95       	com	r25
 3e8:	9b 01       	movw	r18, r22
 3ea:	ac 01       	movw	r20, r24
 3ec:	bd 01       	movw	r22, r26
 3ee:	cf 01       	movw	r24, r30
 3f0:	08 95       	ret

000003f2 <_exit>:
 3f2:	f8 94       	cli

000003f4 <__stop_program>:
 3f4:	ff cf       	rjmp	.-2      	; 0x3f4 <__stop_program>
