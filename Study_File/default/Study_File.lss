
Study_File.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  000004a2  00000536  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800134  00800134  0000056a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000056c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c8  00000000  00000000  00000cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a3a  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000022d  00000000  00000000  000017c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000509  00000000  00000000  000019ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00001ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000148  00000000  00000000  00002018  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a9  00000000  00000000  00002160  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00002409  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__vector_7>
  20:	0c 94 81 01 	jmp	0x302	; 0x302 <__vector_8>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ea       	ldi	r30, 0xA2	; 162
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 33       	cpi	r26, 0x34	; 52
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a4 e3       	ldi	r26, 0x34	; 52
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	aa 33       	cpi	r26, 0x3A	; 58
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 95 01 	call	0x32a	; 0x32a <main>
  c8:	0c 94 4f 02 	jmp	0x49e	; 0x49e <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <COMMAND>:
         COMMAND(0x0C);
  _delay_ms(50);        //표시 on
  }

void COMMAND(char byte){
	PORTG = 0xFC;
  d0:	e5 e6       	ldi	r30, 0x65	; 101
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	9c ef       	ldi	r25, 0xFC	; 252
  d6:	90 83       	st	Z, r25
	PORTC = byte;
  d8:	85 bb       	out	0x15, r24	; 21
	PORTG ^= 0x04;
  da:	80 81       	ld	r24, Z
  dc:	94 e0       	ldi	r25, 0x04	; 4
  de:	89 27       	eor	r24, r25
  e0:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	8f e3       	ldi	r24, 0x3F	; 63
  e4:	9f e1       	ldi	r25, 0x1F	; 31
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <COMMAND+0x16>
  ea:	00 c0       	rjmp	.+0      	; 0xec <COMMAND+0x1c>
  ec:	00 00       	nop
	_delay_ms(2);
}
  ee:	08 95       	ret

000000f0 <init_SYSTEM>:
#include<avr/interrupt.h>

int i, sw1, sw2 = 0;

void init_SYSTEM(){
	DDRG = 0xff;
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	80 93 64 00 	sts	0x0064, r24
	DDRC = 0xff;
  f6:	84 bb       	out	0x14, r24	; 20
	DDRA = 0xff;
  f8:	8a bb       	out	0x1a, r24	; 26
	PORTG = 0xff;
  fa:	80 93 65 00 	sts	0x0065, r24
	PORTC = 0xff;
  fe:	85 bb       	out	0x15, r24	; 21
}
 100:	08 95       	ret

00000102 <init_LCD>:

void init_LCD(void)
  {
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	8f e5       	ldi	r24, 0x5F	; 95
 108:	9a ee       	ldi	r25, 0xEA	; 234
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <init_LCD+0x8>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <init_LCD+0xe>
 110:	00 00       	nop
         _delay_ms(15);            //15msec 이상 시간지연

       //Function set
         COMMAND(0x38);         //기능셋(데이터버스 8비트, 라인수:2줄)
 112:	c8 e6       	ldi	r28, 0x68	; 104
 114:	d0 e0       	ldi	r29, 0x00	; 0
 116:	88 e3       	ldi	r24, 0x38	; 56
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	fe 01       	movw	r30, r28
 11c:	09 95       	icall
 11e:	af e1       	ldi	r26, 0x1F	; 31
 120:	be e4       	ldi	r27, 0x4E	; 78
 122:	11 97       	sbiw	r26, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <init_LCD+0x20>
 126:	00 c0       	rjmp	.+0      	; 0x128 <init_LCD+0x26>
 128:	00 00       	nop
         _delay_ms(5);                //4.1msec 이상 시간지연, 생략가능

       COMMAND(0x38);         //기능셋, 생략 가능
 12a:	88 e3       	ldi	r24, 0x38	; 56
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	fe 01       	movw	r30, r28
 130:	09 95       	icall
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	91 ee       	ldi	r25, 0xE1	; 225
 136:	a4 e0       	ldi	r26, 0x04	; 4
 138:	81 50       	subi	r24, 0x01	; 1
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	a0 40       	sbci	r26, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <init_LCD+0x36>
 140:	00 c0       	rjmp	.+0      	; 0x142 <init_LCD+0x40>
 142:	00 00       	nop
       _delay_ms(100);              //100usec 이상 시간지연, 생략가능

       COMMAND(0x38);          //기능셋, 생략 가능
 144:	88 e3       	ldi	r24, 0x38	; 56
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	fe 01       	movw	r30, r28
 14a:	09 95       	icall
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	90 e7       	ldi	r25, 0x70	; 112
 150:	a2 e0       	ldi	r26, 0x02	; 2
 152:	81 50       	subi	r24, 0x01	; 1
 154:	90 40       	sbci	r25, 0x00	; 0
 156:	a0 40       	sbci	r26, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <init_LCD+0x50>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <init_LCD+0x5a>
 15c:	00 00       	nop
  _delay_ms(50);
         COMMAND(0x08);          //표시 Off , 생략 가능
 15e:	88 e0       	ldi	r24, 0x08	; 8
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	fe 01       	movw	r30, r28
 164:	09 95       	icall
 166:	8f ef       	ldi	r24, 0xFF	; 255
 168:	90 e7       	ldi	r25, 0x70	; 112
 16a:	a2 e0       	ldi	r26, 0x02	; 2
 16c:	81 50       	subi	r24, 0x01	; 1
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	a0 40       	sbci	r26, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <init_LCD+0x6a>
 174:	00 c0       	rjmp	.+0      	; 0x176 <init_LCD+0x74>
 176:	00 00       	nop
  _delay_ms(50);
         COMMAND(0x01);                                             //화면 지우기
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	fe 01       	movw	r30, r28
 17e:	09 95       	icall
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	90 e7       	ldi	r25, 0x70	; 112
 184:	a2 e0       	ldi	r26, 0x02	; 2
 186:	81 50       	subi	r24, 0x01	; 1
 188:	90 40       	sbci	r25, 0x00	; 0
 18a:	a0 40       	sbci	r26, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <init_LCD+0x84>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <init_LCD+0x8e>
 190:	00 00       	nop
  _delay_ms(50);
         COMMAND(0x06);        //엔트리모드셋
 192:	86 e0       	ldi	r24, 0x06	; 6
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	fe 01       	movw	r30, r28
 198:	09 95       	icall
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	90 e7       	ldi	r25, 0x70	; 112
 19e:	a2 e0       	ldi	r26, 0x02	; 2
 1a0:	81 50       	subi	r24, 0x01	; 1
 1a2:	90 40       	sbci	r25, 0x00	; 0
 1a4:	a0 40       	sbci	r26, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <init_LCD+0x9e>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <init_LCD+0xa8>
 1aa:	00 00       	nop
  _delay_ms(50);
         COMMAND(0x0C);
 1ac:	8c e0       	ldi	r24, 0x0C	; 12
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	fe 01       	movw	r30, r28
 1b2:	09 95       	icall
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	90 e7       	ldi	r25, 0x70	; 112
 1b8:	a2 e0       	ldi	r26, 0x02	; 2
 1ba:	81 50       	subi	r24, 0x01	; 1
 1bc:	90 40       	sbci	r25, 0x00	; 0
 1be:	a0 40       	sbci	r26, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <init_LCD+0xb8>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <init_LCD+0xc2>
 1c4:	00 00       	nop
  _delay_ms(50);        //표시 on
  }
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <DATA>:
	PORTG ^= 0x04;
	_delay_ms(2);
}

void DATA(char byte){
	PORTG = 0xFD;
 1cc:	e5 e6       	ldi	r30, 0x65	; 101
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	9d ef       	ldi	r25, 0xFD	; 253
 1d2:	90 83       	st	Z, r25
	PORTC = byte;
 1d4:	85 bb       	out	0x15, r24	; 21
	PORTG ^= 0x04;
 1d6:	80 81       	ld	r24, Z
 1d8:	94 e0       	ldi	r25, 0x04	; 4
 1da:	89 27       	eor	r24, r25
 1dc:	80 83       	st	Z, r24
 1de:	8f e3       	ldi	r24, 0x3F	; 63
 1e0:	9f e1       	ldi	r25, 0x1F	; 31
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <DATA+0x16>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <DATA+0x1c>
 1e8:	00 00       	nop
	_delay_ms(2);
}
 1ea:	08 95       	ret

000001ec <STRING>:

void STRING(char font[], int n){
 1ec:	0f 93       	push	r16
 1ee:	1f 93       	push	r17
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	8c 01       	movw	r16, r24
 1f6:	eb 01       	movw	r28, r22
	for(i = 0; i < n; i++)DATA(font[i]);
 1f8:	10 92 37 01 	sts	0x0137, r1
 1fc:	10 92 36 01 	sts	0x0136, r1
 200:	0f c0       	rjmp	.+30     	; 0x220 <STRING+0x34>
 202:	80 0f       	add	r24, r16
 204:	91 1f       	adc	r25, r17
 206:	fc 01       	movw	r30, r24
 208:	80 81       	ld	r24, Z
 20a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DATA>
 20e:	80 91 36 01 	lds	r24, 0x0136
 212:	90 91 37 01 	lds	r25, 0x0137
 216:	01 96       	adiw	r24, 0x01	; 1
 218:	90 93 37 01 	sts	0x0137, r25
 21c:	80 93 36 01 	sts	0x0136, r24
 220:	80 91 36 01 	lds	r24, 0x0136
 224:	90 91 37 01 	lds	r25, 0x0137
 228:	8c 17       	cp	r24, r28
 22a:	9d 07       	cpc	r25, r29
 22c:	54 f3       	brlt	.-44     	; 0x202 <STRING+0x16>
}
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	1f 91       	pop	r17
 234:	0f 91       	pop	r16
 236:	08 95       	ret

00000238 <MOVE>:

void MOVE(int y, int x){
	if(y == 1) COMMAND(0x80 + x-1);
 238:	81 30       	cpi	r24, 0x01	; 1
 23a:	91 05       	cpc	r25, r1
 23c:	19 f4       	brne	.+6      	; 0x244 <MOVE+0xc>
 23e:	86 2f       	mov	r24, r22
 240:	81 58       	subi	r24, 0x81	; 129
 242:	02 c0       	rjmp	.+4      	; 0x248 <MOVE+0x10>
	else COMMAND(0xC0 + x-1);
 244:	86 2f       	mov	r24, r22
 246:	81 54       	subi	r24, 0x41	; 65
 248:	0e 94 68 00 	call	0xd0	; 0xd0 <COMMAND>
 24c:	08 95       	ret

0000024e <READ_ADC>:
}

int READ_ADC(int adc_input){
	ADCSRA = 0x87;
 24e:	97 e8       	ldi	r25, 0x87	; 135
 250:	96 b9       	out	0x06, r25	; 6
	ADMUX = adc_input;
 252:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 0x40;
 254:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA &= 0x10) == 0);
 256:	86 b1       	in	r24, 0x06	; 6
 258:	80 71       	andi	r24, 0x10	; 16
 25a:	86 b9       	out	0x06, r24	; 6
 25c:	88 23       	and	r24, r24
 25e:	d9 f3       	breq	.-10     	; 0x256 <READ_ADC+0x8>
	return ADCL + (ADCH<<8);
 260:	24 b1       	in	r18, 0x04	; 4
 262:	35 b1       	in	r19, 0x05	; 5
 264:	93 2f       	mov	r25, r19
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	82 0f       	add	r24, r18
 26a:	91 1d       	adc	r25, r1
}
 26c:	08 95       	ret

0000026e <INT_LCD_DISPLAY>:

void INT_LCD_DISPLAY(int val){
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	8c 01       	movw	r16, r24
	DATA(val/1000%10 + 0x30);
 278:	68 ee       	ldi	r22, 0xE8	; 232
 27a:	73 e0       	ldi	r23, 0x03	; 3
 27c:	0e 94 28 02 	call	0x450	; 0x450 <__divmodhi4>
 280:	cb 01       	movw	r24, r22
 282:	ca e0       	ldi	r28, 0x0A	; 10
 284:	d0 e0       	ldi	r29, 0x00	; 0
 286:	be 01       	movw	r22, r28
 288:	0e 94 28 02 	call	0x450	; 0x450 <__divmodhi4>
 28c:	80 5d       	subi	r24, 0xD0	; 208
 28e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DATA>
	DATA(val/100%10 + 0x30);
 292:	c8 01       	movw	r24, r16
 294:	64 e6       	ldi	r22, 0x64	; 100
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	0e 94 28 02 	call	0x450	; 0x450 <__divmodhi4>
 29c:	cb 01       	movw	r24, r22
 29e:	be 01       	movw	r22, r28
 2a0:	0e 94 28 02 	call	0x450	; 0x450 <__divmodhi4>
 2a4:	80 5d       	subi	r24, 0xD0	; 208
 2a6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DATA>
	DATA(val/10%10 + 0x30);
 2aa:	c8 01       	movw	r24, r16
 2ac:	be 01       	movw	r22, r28
 2ae:	0e 94 28 02 	call	0x450	; 0x450 <__divmodhi4>
 2b2:	08 2f       	mov	r16, r24
 2b4:	cb 01       	movw	r24, r22
 2b6:	be 01       	movw	r22, r28
 2b8:	0e 94 28 02 	call	0x450	; 0x450 <__divmodhi4>
 2bc:	80 5d       	subi	r24, 0xD0	; 208
 2be:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DATA>
	DATA(val%10 + 0x30);
 2c2:	80 2f       	mov	r24, r16
 2c4:	80 5d       	subi	r24, 0xD0	; 208
 2c6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DATA>
	DATA(0x20);
 2ca:	80 e2       	ldi	r24, 0x20	; 32
 2cc:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DATA>
}
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
 2d4:	1f 91       	pop	r17
 2d6:	0f 91       	pop	r16
 2d8:	08 95       	ret

000002da <__vector_7>:
			sw2 = 0;
		}
	}
}

ISR(INT6_vect){
 2da:	1f 92       	push	r1
 2dc:	0f 92       	push	r0
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	0f 92       	push	r0
 2e2:	11 24       	eor	r1, r1
 2e4:	8f 93       	push	r24
 2e6:	9f 93       	push	r25
	sw1 = 1;
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	90 93 39 01 	sts	0x0139, r25
 2f0:	80 93 38 01 	sts	0x0138, r24
}
 2f4:	9f 91       	pop	r25
 2f6:	8f 91       	pop	r24
 2f8:	0f 90       	pop	r0
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	0f 90       	pop	r0
 2fe:	1f 90       	pop	r1
 300:	18 95       	reti

00000302 <__vector_8>:
ISR(INT7_vect){
 302:	1f 92       	push	r1
 304:	0f 92       	push	r0
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	0f 92       	push	r0
 30a:	11 24       	eor	r1, r1
 30c:	8f 93       	push	r24
 30e:	9f 93       	push	r25
	sw2 = 1;
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	90 93 35 01 	sts	0x0135, r25
 318:	80 93 34 01 	sts	0x0134, r24
}
 31c:	9f 91       	pop	r25
 31e:	8f 91       	pop	r24
 320:	0f 90       	pop	r0
 322:	0f be       	out	0x3f, r0	; 63
 324:	0f 90       	pop	r0
 326:	1f 90       	pop	r1
 328:	18 95       	reti

0000032a <main>:
	DATA(val%10 + 0x30);
	DATA(0x20);
}

int main(){
	SREG = 0x80;
 32a:	80 e8       	ldi	r24, 0x80	; 128
 32c:	8f bf       	out	0x3f, r24	; 63
	EIMSK = 0xC0;
 32e:	80 ec       	ldi	r24, 0xC0	; 192
 330:	89 bf       	out	0x39, r24	; 57
	EICRB = 0xa0;
 332:	80 ea       	ldi	r24, 0xA0	; 160
 334:	8a bf       	out	0x3a, r24	; 58

	init_SYSTEM();
 336:	0e 94 78 00 	call	0xf0	; 0xf0 <init_SYSTEM>
	init_LCD();
 33a:	0e 94 81 00 	call	0x102	; 0x102 <init_LCD>

	while(1){
		PORTA = 0xff;
 33e:	df ef       	ldi	r29, 0xFF	; 255
			MOVE(1,4);
			STRING("ADC value =  ", 13);
			sw1 = 0;
		}
		if(sw2 == 1){
			PORTA = 0x55;
 340:	c5 e5       	ldi	r28, 0x55	; 85

	init_SYSTEM();
	init_LCD();

	while(1){
		PORTA = 0xff;
 342:	db bb       	out	0x1b, r29	; 27
		MOVE(1,4);
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	64 e0       	ldi	r22, 0x04	; 4
 34a:	70 e0       	ldi	r23, 0x00	; 0
 34c:	0e 94 1c 01 	call	0x238	; 0x238 <MOVE>
		STRING("ADC value =  ", 13);
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	6d e0       	ldi	r22, 0x0D	; 13
 356:	70 e0       	ldi	r23, 0x00	; 0
 358:	0e 94 f6 00 	call	0x1ec	; 0x1ec <STRING>
		MOVE(2,1);
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	0e 94 1c 01 	call	0x238	; 0x238 <MOVE>
		STRING("VR ",3);
 368:	8e e0       	ldi	r24, 0x0E	; 14
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	63 e0       	ldi	r22, 0x03	; 3
 36e:	70 e0       	ldi	r23, 0x00	; 0
 370:	0e 94 f6 00 	call	0x1ec	; 0x1ec <STRING>
		INT_LCD_DISPLAY(READ_ADC(0));
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 27 01 	call	0x24e	; 0x24e <READ_ADC>
 37c:	0e 94 37 01 	call	0x26e	; 0x26e <INT_LCD_DISPLAY>
		STRING("CdS ", 4);
 380:	82 e1       	ldi	r24, 0x12	; 18
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	64 e0       	ldi	r22, 0x04	; 4
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	0e 94 f6 00 	call	0x1ec	; 0x1ec <STRING>
		INT_LCD_DISPLAY(READ_ADC(1));
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 27 01 	call	0x24e	; 0x24e <READ_ADC>
 394:	0e 94 37 01 	call	0x26e	; 0x26e <INT_LCD_DISPLAY>

		if(sw1 == 1){
 398:	80 91 38 01 	lds	r24, 0x0138
 39c:	90 91 39 01 	lds	r25, 0x0139
 3a0:	81 30       	cpi	r24, 0x01	; 1
 3a2:	91 05       	cpc	r25, r1
 3a4:	31 f5       	brne	.+76     	; 0x3f2 <main+0xc8>
			PORTA = 0x00;
 3a6:	1b ba       	out	0x1b, r1	; 27
			MOVE(1,4);
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	64 e0       	ldi	r22, 0x04	; 4
 3ae:	70 e0       	ldi	r23, 0x00	; 0
 3b0:	0e 94 1c 01 	call	0x238	; 0x238 <MOVE>
			STRING("SW1 Pressed  ", 13);
 3b4:	87 e1       	ldi	r24, 0x17	; 23
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	6d e0       	ldi	r22, 0x0D	; 13
 3ba:	70 e0       	ldi	r23, 0x00	; 0
 3bc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <STRING>
 3c0:	8f ef       	ldi	r24, 0xFF	; 255
 3c2:	99 e6       	ldi	r25, 0x69	; 105
 3c4:	a8 e1       	ldi	r26, 0x18	; 24
 3c6:	81 50       	subi	r24, 0x01	; 1
 3c8:	90 40       	sbci	r25, 0x00	; 0
 3ca:	a0 40       	sbci	r26, 0x00	; 0
 3cc:	e1 f7       	brne	.-8      	; 0x3c6 <main+0x9c>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <main+0xa6>
 3d0:	00 00       	nop
			_delay_ms(500);
			MOVE(1,4);
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	64 e0       	ldi	r22, 0x04	; 4
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	0e 94 1c 01 	call	0x238	; 0x238 <MOVE>
			STRING("ADC value =  ", 13);
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	6d e0       	ldi	r22, 0x0D	; 13
 3e4:	70 e0       	ldi	r23, 0x00	; 0
 3e6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <STRING>
			sw1 = 0;
 3ea:	10 92 39 01 	sts	0x0139, r1
 3ee:	10 92 38 01 	sts	0x0138, r1
		}
		if(sw2 == 1){
 3f2:	80 91 34 01 	lds	r24, 0x0134
 3f6:	90 91 35 01 	lds	r25, 0x0135
 3fa:	81 30       	cpi	r24, 0x01	; 1
 3fc:	91 05       	cpc	r25, r1
 3fe:	09 f0       	breq	.+2      	; 0x402 <main+0xd8>
 400:	a0 cf       	rjmp	.-192    	; 0x342 <main+0x18>
			PORTA = 0x55;
 402:	cb bb       	out	0x1b, r28	; 27
			MOVE(1,4);
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	64 e0       	ldi	r22, 0x04	; 4
 40a:	70 e0       	ldi	r23, 0x00	; 0
 40c:	0e 94 1c 01 	call	0x238	; 0x238 <MOVE>
			STRING("SW2 Pressed  ", 13);
 410:	85 e2       	ldi	r24, 0x25	; 37
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	6d e0       	ldi	r22, 0x0D	; 13
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	0e 94 f6 00 	call	0x1ec	; 0x1ec <STRING>
 41c:	8f ef       	ldi	r24, 0xFF	; 255
 41e:	99 e6       	ldi	r25, 0x69	; 105
 420:	a8 e1       	ldi	r26, 0x18	; 24
 422:	81 50       	subi	r24, 0x01	; 1
 424:	90 40       	sbci	r25, 0x00	; 0
 426:	a0 40       	sbci	r26, 0x00	; 0
 428:	e1 f7       	brne	.-8      	; 0x422 <main+0xf8>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <main+0x102>
 42c:	00 00       	nop
			_delay_ms(500);
			MOVE(1,4);
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	64 e0       	ldi	r22, 0x04	; 4
 434:	70 e0       	ldi	r23, 0x00	; 0
 436:	0e 94 1c 01 	call	0x238	; 0x238 <MOVE>
			STRING("ADC value =  ", 13);
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	91 e0       	ldi	r25, 0x01	; 1
 43e:	6d e0       	ldi	r22, 0x0D	; 13
 440:	70 e0       	ldi	r23, 0x00	; 0
 442:	0e 94 f6 00 	call	0x1ec	; 0x1ec <STRING>
			sw2 = 0;
 446:	10 92 35 01 	sts	0x0135, r1
 44a:	10 92 34 01 	sts	0x0134, r1
 44e:	79 cf       	rjmp	.-270    	; 0x342 <main+0x18>

00000450 <__divmodhi4>:
 450:	97 fb       	bst	r25, 7
 452:	09 2e       	mov	r0, r25
 454:	07 26       	eor	r0, r23
 456:	0a d0       	rcall	.+20     	; 0x46c <__divmodhi4_neg1>
 458:	77 fd       	sbrc	r23, 7
 45a:	04 d0       	rcall	.+8      	; 0x464 <__divmodhi4_neg2>
 45c:	0c d0       	rcall	.+24     	; 0x476 <__udivmodhi4>
 45e:	06 d0       	rcall	.+12     	; 0x46c <__divmodhi4_neg1>
 460:	00 20       	and	r0, r0
 462:	1a f4       	brpl	.+6      	; 0x46a <__divmodhi4_exit>

00000464 <__divmodhi4_neg2>:
 464:	70 95       	com	r23
 466:	61 95       	neg	r22
 468:	7f 4f       	sbci	r23, 0xFF	; 255

0000046a <__divmodhi4_exit>:
 46a:	08 95       	ret

0000046c <__divmodhi4_neg1>:
 46c:	f6 f7       	brtc	.-4      	; 0x46a <__divmodhi4_exit>
 46e:	90 95       	com	r25
 470:	81 95       	neg	r24
 472:	9f 4f       	sbci	r25, 0xFF	; 255
 474:	08 95       	ret

00000476 <__udivmodhi4>:
 476:	aa 1b       	sub	r26, r26
 478:	bb 1b       	sub	r27, r27
 47a:	51 e1       	ldi	r21, 0x11	; 17
 47c:	07 c0       	rjmp	.+14     	; 0x48c <__udivmodhi4_ep>

0000047e <__udivmodhi4_loop>:
 47e:	aa 1f       	adc	r26, r26
 480:	bb 1f       	adc	r27, r27
 482:	a6 17       	cp	r26, r22
 484:	b7 07       	cpc	r27, r23
 486:	10 f0       	brcs	.+4      	; 0x48c <__udivmodhi4_ep>
 488:	a6 1b       	sub	r26, r22
 48a:	b7 0b       	sbc	r27, r23

0000048c <__udivmodhi4_ep>:
 48c:	88 1f       	adc	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	5a 95       	dec	r21
 492:	a9 f7       	brne	.-22     	; 0x47e <__udivmodhi4_loop>
 494:	80 95       	com	r24
 496:	90 95       	com	r25
 498:	bc 01       	movw	r22, r24
 49a:	cd 01       	movw	r24, r26
 49c:	08 95       	ret

0000049e <_exit>:
 49e:	f8 94       	cli

000004a0 <__stop_program>:
 4a0:	ff cf       	rjmp	.-2      	; 0x4a0 <__stop_program>
