
ADC_LCD_Display_VR_CdS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  0000045a  000004ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000045a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800150  00800150  0000053e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000540  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a8  00000000  00000000  00000c98  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000935  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000020a  00000000  00000000  00001675  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000047c  00000000  00000000  0000187f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00001cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000178  00000000  00000000  00001e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ea  00000000  00000000  00001f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000227e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__vector_7>
  20:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__vector_8>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e5       	ldi	r30, 0x5A	; 90
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 35       	cpi	r26, 0x50	; 80
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e5       	ldi	r26, 0x50	; 80
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a4 35       	cpi	r26, 0x54	; 84
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <main>
  c8:	0c 94 2b 02 	jmp	0x456	; 0x456 <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <COMMAND>:

int sw1, sw2 = 0;

void COMMAND(char byte)										 //##제공하지 않음 
{
    PORTG = 0xFC;   		 //PORTG에 RS, RW, E 가 연결되어 있다.
  d0:	e5 e6       	ldi	r30, 0x65	; 101
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	9c ef       	ldi	r25, 0xFC	; 252
  d6:	90 83       	st	Z, r25
    PORTC = byte; 	                   //PORTC에 데이터버스가 연결되어 있다.
  d8:	85 bb       	out	0x15, r24	; 21
    PORTG ^= 0x04;   		//E 신호를 H->L로 하기 위해
  da:	80 81       	ld	r24, Z
  dc:	94 e0       	ldi	r25, 0x04	; 4
  de:	89 27       	eor	r24, r25
  e0:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	8f e3       	ldi	r24, 0x3F	; 63
  e4:	9f e1       	ldi	r25, 0x1F	; 31
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <COMMAND+0x16>
  ea:	00 c0       	rjmp	.+0      	; 0xec <COMMAND+0x1c>
  ec:	00 00       	nop
    _delay_ms(2);    		//LCD 내부 동작시간
}
  ee:	08 95       	ret

000000f0 <DATA>:

//LCD에 데이터를 쓰기 위한 함수
void DATA(unsigned char byte)									 //##제공하지 않음
{
    PORTG = 0xFD;    		  //PORTG에 RS, RW, E 가 연결되어 있다.
  f0:	e5 e6       	ldi	r30, 0x65	; 101
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	9d ef       	ldi	r25, 0xFD	; 253
  f6:	90 83       	st	Z, r25
    PORTC = byte;  		  //PORTC에 데이터버스가 연결되어 있다.
  f8:	85 bb       	out	0x15, r24	; 21
    PORTG ^= 0x04;  		  //E 신호를 H->L로 하기 위해
  fa:	80 81       	ld	r24, Z
  fc:	94 e0       	ldi	r25, 0x04	; 4
  fe:	89 27       	eor	r24, r25
 100:	80 83       	st	Z, r24
 102:	8f e3       	ldi	r24, 0x3F	; 63
 104:	9f e1       	ldi	r25, 0x1F	; 31
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <DATA+0x16>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <DATA+0x1c>
 10c:	00 00       	nop
    _delay_ms(2);   		  //LCD 내부 동작시간
}
 10e:	08 95       	ret

00000110 <init_SYSTEM>:

// ATmega128의 포트 초기화
void init_SYSTEM(void)
{
	 DDRA = 0xff;
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	8a bb       	out	0x1a, r24	; 26
     DDRC = 0xFF; 			 //LCD 데이터 버스
 114:	84 bb       	out	0x14, r24	; 20
     PORTC = 0xFF;
 116:	85 bb       	out	0x15, r24	; 21
     DDRG = 0xFF; 			 //LCD 컨트롤 신호(PG2=LCD_EN, PG1=RW, PG0=RS)
 118:	80 93 64 00 	sts	0x0064, r24
     PORTG = 0xFF;
 11c:	80 93 65 00 	sts	0x0065, r24
}
 120:	08 95       	ret

00000122 <init_LCD>:
 122:	8f e5       	ldi	r24, 0x5F	; 95
 124:	9a ee       	ldi	r25, 0xEA	; 234
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <init_LCD+0x4>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <init_LCD+0xa>
 12c:	00 00       	nop
void init_LCD(void)
{
       _delay_ms(15);    			     //15msec 이상 시간지연

       //Function set
       COMMAND(0x38); 			     //기능셋(데이터버스 8비트, 라인수:2줄)
 12e:	88 e3       	ldi	r24, 0x38	; 56
 130:	0e 94 68 00 	call	0xd0	; 0xd0 <COMMAND>
 134:	af e1       	ldi	r26, 0x1F	; 31
 136:	be e4       	ldi	r27, 0x4E	; 78
 138:	11 97       	sbiw	r26, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <init_LCD+0x16>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <init_LCD+0x1c>
 13e:	00 00       	nop
       _delay_ms(5);        			     //4.1msec 이상 시간지연, 생략가능
       COMMAND(0x38); 			     //기능셋, 생략 가능
 140:	88 e3       	ldi	r24, 0x38	; 56
 142:	0e 94 68 00 	call	0xd0	; 0xd0 <COMMAND>
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	91 ee       	ldi	r25, 0xE1	; 225
 14a:	a4 e0       	ldi	r26, 0x04	; 4
 14c:	81 50       	subi	r24, 0x01	; 1
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	a0 40       	sbci	r26, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <init_LCD+0x2a>
 154:	00 c0       	rjmp	.+0      	; 0x156 <init_LCD+0x34>
 156:	00 00       	nop
       _delay_ms(100);      			     //100usec 이상 시간지연, 생략가능

       COMMAND(0x38);  			     //기능셋, 생략 가능
 158:	88 e3       	ldi	r24, 0x38	; 56
 15a:	0e 94 68 00 	call	0xd0	; 0xd0 <COMMAND>
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	90 e7       	ldi	r25, 0x70	; 112
 162:	a2 e0       	ldi	r26, 0x02	; 2
 164:	81 50       	subi	r24, 0x01	; 1
 166:	90 40       	sbci	r25, 0x00	; 0
 168:	a0 40       	sbci	r26, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <init_LCD+0x42>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <init_LCD+0x4c>
 16e:	00 00       	nop
	_delay_ms(50); 
       COMMAND(0x08);  			     //표시 Off , 생략 가능
 170:	88 e0       	ldi	r24, 0x08	; 8
 172:	0e 94 68 00 	call	0xd0	; 0xd0 <COMMAND>
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	90 e7       	ldi	r25, 0x70	; 112
 17a:	a2 e0       	ldi	r26, 0x02	; 2
 17c:	81 50       	subi	r24, 0x01	; 1
 17e:	90 40       	sbci	r25, 0x00	; 0
 180:	a0 40       	sbci	r26, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <init_LCD+0x5a>
 184:	00 c0       	rjmp	.+0      	; 0x186 <init_LCD+0x64>
 186:	00 00       	nop
	_delay_ms(50);
       COMMAND(0x01);                                             //화면 지우기
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	0e 94 68 00 	call	0xd0	; 0xd0 <COMMAND>
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	90 e7       	ldi	r25, 0x70	; 112
 192:	a2 e0       	ldi	r26, 0x02	; 2
 194:	81 50       	subi	r24, 0x01	; 1
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	a0 40       	sbci	r26, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <init_LCD+0x72>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <init_LCD+0x7c>
 19e:	00 00       	nop
	_delay_ms(50);
       COMMAND(0x06);			     //엔트리모드셋
 1a0:	86 e0       	ldi	r24, 0x06	; 6
 1a2:	0e 94 68 00 	call	0xd0	; 0xd0 <COMMAND>
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	90 e7       	ldi	r25, 0x70	; 112
 1aa:	a2 e0       	ldi	r26, 0x02	; 2
 1ac:	81 50       	subi	r24, 0x01	; 1
 1ae:	90 40       	sbci	r25, 0x00	; 0
 1b0:	a0 40       	sbci	r26, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <init_LCD+0x8a>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <init_LCD+0x94>
 1b6:	00 00       	nop
	_delay_ms(50);
       COMMAND(0x0C); 
 1b8:	8c e0       	ldi	r24, 0x0C	; 12
 1ba:	0e 94 68 00 	call	0xd0	; 0xd0 <COMMAND>
 1be:	8f ef       	ldi	r24, 0xFF	; 255
 1c0:	90 e7       	ldi	r25, 0x70	; 112
 1c2:	a2 e0       	ldi	r26, 0x02	; 2
 1c4:	81 50       	subi	r24, 0x01	; 1
 1c6:	90 40       	sbci	r25, 0x00	; 0
 1c8:	a0 40       	sbci	r26, 0x00	; 0
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <init_LCD+0xa2>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <init_LCD+0xac>
 1ce:	00 00       	nop
	_delay_ms(50);			     //표시 on
}
 1d0:	08 95       	ret

000001d2 <STRING>:

void STRING(unsigned char font[], unsigned char n) 			//##혹시 모르니 암기 
{
 1d2:	ef 92       	push	r14
 1d4:	ff 92       	push	r15
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
    int i;
	for(i=0; i<n; i++)
 1de:	7c 01       	movw	r14, r24
 1e0:	00 e0       	ldi	r16, 0x00	; 0
 1e2:	10 e0       	ldi	r17, 0x00	; 0
 1e4:	c6 2f       	mov	r28, r22
 1e6:	d0 e0       	ldi	r29, 0x00	; 0
 1e8:	07 c0       	rjmp	.+14     	; 0x1f8 <STRING+0x26>
    {
        DATA(font[i]);
 1ea:	f7 01       	movw	r30, r14
 1ec:	81 91       	ld	r24, Z+
 1ee:	7f 01       	movw	r14, r30
 1f0:	0e 94 78 00 	call	0xf0	; 0xf0 <DATA>
}

void STRING(unsigned char font[], unsigned char n) 			//##혹시 모르니 암기 
{
    int i;
	for(i=0; i<n; i++)
 1f4:	0f 5f       	subi	r16, 0xFF	; 255
 1f6:	1f 4f       	sbci	r17, 0xFF	; 255
 1f8:	0c 17       	cp	r16, r28
 1fa:	1d 07       	cpc	r17, r29
 1fc:	b4 f3       	brlt	.-20     	; 0x1ea <STRING+0x18>
    {
        DATA(font[i]);
    }
}
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	1f 91       	pop	r17
 204:	0f 91       	pop	r16
 206:	ff 90       	pop	r15
 208:	ef 90       	pop	r14
 20a:	08 95       	ret

0000020c <MOVE>:

void MOVE(int y, int x)								//##혹시 모르니 암기 
{
    unsigned char data;
    if(y == 1)    data = 0x80 + x - 1;        // 1행
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	91 05       	cpc	r25, r1
 210:	19 f4       	brne	.+6      	; 0x218 <MOVE+0xc>
 212:	86 2f       	mov	r24, r22
 214:	81 58       	subi	r24, 0x81	; 129
 216:	02 c0       	rjmp	.+4      	; 0x21c <MOVE+0x10>
    else          data = 0xc0 + x - 1;        // 2행
 218:	86 2f       	mov	r24, r22
 21a:	81 54       	subi	r24, 0x41	; 65
    COMMAND(data);
 21c:	0e 94 68 00 	call	0xd0	; 0xd0 <COMMAND>
}
 220:	08 95       	ret

00000222 <READ_ADC>:

unsigned int READ_ADC(unsigned int adc_input){
	unsigned int adc_result = 0;
 	ADCSRA = 0x87;
 222:	97 e8       	ldi	r25, 0x87	; 135
 224:	96 b9       	out	0x06, r25	; 6
	ADMUX = adc_input;
 226:	87 b9       	out	0x07, r24	; 7
 	ADCSRA |= 0x40;
 228:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA & 0x10)==0);
 22a:	34 9b       	sbis	0x06, 4	; 6
 22c:	fe cf       	rjmp	.-4      	; 0x22a <READ_ADC+0x8>
	adc_result = ADCL + (ADCH<<8);
 22e:	24 b1       	in	r18, 0x04	; 4
 230:	35 b1       	in	r19, 0x05	; 5
 232:	93 2f       	mov	r25, r19
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	82 0f       	add	r24, r18
 238:	91 1d       	adc	r25, r1
	return adc_result;
}
 23a:	08 95       	ret

0000023c <LCD_INT_DISPLAY>:

void LCD_INT_DISPLAY(unsigned int val) 	// A/D 변환 결과값을 정수값으로 표시하는 함수

{ 
 23c:	0f 93       	push	r16
 23e:	1f 93       	push	r17
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	8c 01       	movw	r16, r24
	DATA(val/1000%10 + 0x30);
 246:	68 ee       	ldi	r22, 0xE8	; 232
 248:	73 e0       	ldi	r23, 0x03	; 3
 24a:	0e 94 17 02 	call	0x42e	; 0x42e <__udivmodhi4>
 24e:	cb 01       	movw	r24, r22
 250:	ca e0       	ldi	r28, 0x0A	; 10
 252:	d0 e0       	ldi	r29, 0x00	; 0
 254:	be 01       	movw	r22, r28
 256:	0e 94 17 02 	call	0x42e	; 0x42e <__udivmodhi4>
 25a:	80 5d       	subi	r24, 0xD0	; 208
 25c:	0e 94 78 00 	call	0xf0	; 0xf0 <DATA>
	DATA(val/100%10 + 0x30);
 260:	c8 01       	movw	r24, r16
 262:	64 e6       	ldi	r22, 0x64	; 100
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	0e 94 17 02 	call	0x42e	; 0x42e <__udivmodhi4>
 26a:	cb 01       	movw	r24, r22
 26c:	be 01       	movw	r22, r28
 26e:	0e 94 17 02 	call	0x42e	; 0x42e <__udivmodhi4>
 272:	80 5d       	subi	r24, 0xD0	; 208
 274:	0e 94 78 00 	call	0xf0	; 0xf0 <DATA>
	DATA(val/10%10 + 0x30); 
 278:	c8 01       	movw	r24, r16
 27a:	be 01       	movw	r22, r28
 27c:	0e 94 17 02 	call	0x42e	; 0x42e <__udivmodhi4>
 280:	08 2f       	mov	r16, r24
 282:	cb 01       	movw	r24, r22
 284:	be 01       	movw	r22, r28
 286:	0e 94 17 02 	call	0x42e	; 0x42e <__udivmodhi4>
 28a:	80 5d       	subi	r24, 0xD0	; 208
 28c:	0e 94 78 00 	call	0xf0	; 0xf0 <DATA>
	DATA(val%10 + 0x30);
 290:	80 2f       	mov	r24, r16
 292:	80 5d       	subi	r24, 0xD0	; 208
 294:	0e 94 78 00 	call	0xf0	; 0xf0 <DATA>
	DATA(0x20);
 298:	80 e2       	ldi	r24, 0x20	; 32
 29a:	0e 94 78 00 	call	0xf0	; 0xf0 <DATA>
}
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	1f 91       	pop	r17
 2a4:	0f 91       	pop	r16
 2a6:	08 95       	ret

000002a8 <__vector_7>:
			sw2 = 0;
		}
	}
}

ISR(INT6_vect){
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
 2b2:	8f 93       	push	r24
 2b4:	9f 93       	push	r25
	sw1=1;
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	90 93 53 01 	sts	0x0153, r25
 2be:	80 93 52 01 	sts	0x0152, r24
}
 2c2:	9f 91       	pop	r25
 2c4:	8f 91       	pop	r24
 2c6:	0f 90       	pop	r0
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	0f 90       	pop	r0
 2cc:	1f 90       	pop	r1
 2ce:	18 95       	reti

000002d0 <__vector_8>:

ISR(INT7_vect){
 2d0:	1f 92       	push	r1
 2d2:	0f 92       	push	r0
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	0f 92       	push	r0
 2d8:	11 24       	eor	r1, r1
 2da:	8f 93       	push	r24
 2dc:	9f 93       	push	r25

	sw2 = 1;
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	90 93 51 01 	sts	0x0151, r25
 2e6:	80 93 50 01 	sts	0x0150, r24
}
 2ea:	9f 91       	pop	r25
 2ec:	8f 91       	pop	r24
 2ee:	0f 90       	pop	r0
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	0f 90       	pop	r0
 2f4:	1f 90       	pop	r1
 2f6:	18 95       	reti

000002f8 <main>:
}


int main(void)
{
	SREG = 0x80;
 2f8:	80 e8       	ldi	r24, 0x80	; 128
 2fa:	8f bf       	out	0x3f, r24	; 63
	EIMSK = 0x40;
 2fc:	80 e4       	ldi	r24, 0x40	; 64
 2fe:	89 bf       	out	0x39, r24	; 57
	EICRB = 0x30;
 300:	80 e3       	ldi	r24, 0x30	; 48
 302:	8a bf       	out	0x3a, r24	; 58
	EIMSK = 0xC0;
 304:	80 ec       	ldi	r24, 0xC0	; 192
 306:	89 bf       	out	0x39, r24	; 57
	EICRB = 0xa0;
 308:	80 ea       	ldi	r24, 0xA0	; 160
 30a:	8a bf       	out	0x3a, r24	; 58

	init_SYSTEM();
 30c:	0e 94 88 00 	call	0x110	; 0x110 <init_SYSTEM>
	init_LCD();
 310:	0e 94 91 00 	call	0x122	; 0x122 <init_LCD>
	MOVE(2,1);	
 314:	82 e0       	ldi	r24, 0x02	; 2
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	61 e0       	ldi	r22, 0x01	; 1
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	0e 94 06 01 	call	0x20c	; 0x20c <MOVE>
	STRING("VR 0000 CdS 0000",16);
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	60 e1       	ldi	r22, 0x10	; 16
 326:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <STRING>
	while(1)
	{	
		PORTA = 0xff;
 32a:	df ef       	ldi	r29, 0xFF	; 255
			STRING("ADC value =  ",13);
			sw1 = 0;
		
		}
		if(sw2 == 1){
			PORTA = 0b01010101;
 32c:	c5 e5       	ldi	r28, 0x55	; 85
	init_LCD();
	MOVE(2,1);	
	STRING("VR 0000 CdS 0000",16);
	while(1)
	{	
		PORTA = 0xff;
 32e:	db bb       	out	0x1b, r29	; 27
		MOVE(1,4);
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	64 e0       	ldi	r22, 0x04	; 4
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	0e 94 06 01 	call	0x20c	; 0x20c <MOVE>
		STRING("ADC value =",11);
 33c:	81 e1       	ldi	r24, 0x11	; 17
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	6b e0       	ldi	r22, 0x0B	; 11
 342:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <STRING>
		MOVE(2,1);
 346:	82 e0       	ldi	r24, 0x02	; 2
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	0e 94 06 01 	call	0x20c	; 0x20c <MOVE>
		STRING("VR ",3);
 352:	8d e1       	ldi	r24, 0x1D	; 29
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	63 e0       	ldi	r22, 0x03	; 3
 358:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <STRING>
		LCD_INT_DISPLAY(READ_ADC(0)); 
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 11 01 	call	0x222	; 0x222 <READ_ADC>
 364:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_INT_DISPLAY>
		STRING("CdS ",4);
 368:	81 e2       	ldi	r24, 0x21	; 33
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	64 e0       	ldi	r22, 0x04	; 4
 36e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <STRING>
		LCD_INT_DISPLAY(READ_ADC(1));   
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 11 01 	call	0x222	; 0x222 <READ_ADC>
 37a:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_INT_DISPLAY>


		if(sw1 == 1){
 37e:	80 91 52 01 	lds	r24, 0x0152
 382:	90 91 53 01 	lds	r25, 0x0153
 386:	81 30       	cpi	r24, 0x01	; 1
 388:	91 05       	cpc	r25, r1
 38a:	21 f5       	brne	.+72     	; 0x3d4 <main+0xdc>
			PORTA = 0x00;
 38c:	1b ba       	out	0x1b, r1	; 27
			MOVE(1,4);
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	64 e0       	ldi	r22, 0x04	; 4
 394:	70 e0       	ldi	r23, 0x00	; 0
 396:	0e 94 06 01 	call	0x20c	; 0x20c <MOVE>
			STRING("SW1 Pressed  ",13);
 39a:	86 e2       	ldi	r24, 0x26	; 38
 39c:	91 e0       	ldi	r25, 0x01	; 1
 39e:	6d e0       	ldi	r22, 0x0D	; 13
 3a0:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <STRING>
 3a4:	8f ef       	ldi	r24, 0xFF	; 255
 3a6:	99 e6       	ldi	r25, 0x69	; 105
 3a8:	a8 e1       	ldi	r26, 0x18	; 24
 3aa:	81 50       	subi	r24, 0x01	; 1
 3ac:	90 40       	sbci	r25, 0x00	; 0
 3ae:	a0 40       	sbci	r26, 0x00	; 0
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <main+0xb2>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <main+0xbc>
 3b4:	00 00       	nop
			_delay_ms(500);
			MOVE(1,4);
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	64 e0       	ldi	r22, 0x04	; 4
 3bc:	70 e0       	ldi	r23, 0x00	; 0
 3be:	0e 94 06 01 	call	0x20c	; 0x20c <MOVE>
			STRING("ADC value =  ",13);
 3c2:	84 e3       	ldi	r24, 0x34	; 52
 3c4:	91 e0       	ldi	r25, 0x01	; 1
 3c6:	6d e0       	ldi	r22, 0x0D	; 13
 3c8:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <STRING>
			sw1 = 0;
 3cc:	10 92 53 01 	sts	0x0153, r1
 3d0:	10 92 52 01 	sts	0x0152, r1
		
		}
		if(sw2 == 1){
 3d4:	80 91 50 01 	lds	r24, 0x0150
 3d8:	90 91 51 01 	lds	r25, 0x0151
 3dc:	81 30       	cpi	r24, 0x01	; 1
 3de:	91 05       	cpc	r25, r1
 3e0:	09 f0       	breq	.+2      	; 0x3e4 <main+0xec>
 3e2:	a5 cf       	rjmp	.-182    	; 0x32e <main+0x36>
			PORTA = 0b01010101;
 3e4:	cb bb       	out	0x1b, r28	; 27
			MOVE(1,4);
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	64 e0       	ldi	r22, 0x04	; 4
 3ec:	70 e0       	ldi	r23, 0x00	; 0
 3ee:	0e 94 06 01 	call	0x20c	; 0x20c <MOVE>
			STRING("SW2 Pressed  ",13);
 3f2:	82 e4       	ldi	r24, 0x42	; 66
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	6d e0       	ldi	r22, 0x0D	; 13
 3f8:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <STRING>
 3fc:	8f ef       	ldi	r24, 0xFF	; 255
 3fe:	99 e6       	ldi	r25, 0x69	; 105
 400:	a8 e1       	ldi	r26, 0x18	; 24
 402:	81 50       	subi	r24, 0x01	; 1
 404:	90 40       	sbci	r25, 0x00	; 0
 406:	a0 40       	sbci	r26, 0x00	; 0
 408:	e1 f7       	brne	.-8      	; 0x402 <main+0x10a>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <main+0x114>
 40c:	00 00       	nop
			_delay_ms(500);
			MOVE(1,4);
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	64 e0       	ldi	r22, 0x04	; 4
 414:	70 e0       	ldi	r23, 0x00	; 0
 416:	0e 94 06 01 	call	0x20c	; 0x20c <MOVE>
			STRING("ADC value =  ",13);
 41a:	84 e3       	ldi	r24, 0x34	; 52
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	6d e0       	ldi	r22, 0x0D	; 13
 420:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <STRING>
			sw2 = 0;
 424:	10 92 51 01 	sts	0x0151, r1
 428:	10 92 50 01 	sts	0x0150, r1
 42c:	80 cf       	rjmp	.-256    	; 0x32e <main+0x36>

0000042e <__udivmodhi4>:
 42e:	aa 1b       	sub	r26, r26
 430:	bb 1b       	sub	r27, r27
 432:	51 e1       	ldi	r21, 0x11	; 17
 434:	07 c0       	rjmp	.+14     	; 0x444 <__udivmodhi4_ep>

00000436 <__udivmodhi4_loop>:
 436:	aa 1f       	adc	r26, r26
 438:	bb 1f       	adc	r27, r27
 43a:	a6 17       	cp	r26, r22
 43c:	b7 07       	cpc	r27, r23
 43e:	10 f0       	brcs	.+4      	; 0x444 <__udivmodhi4_ep>
 440:	a6 1b       	sub	r26, r22
 442:	b7 0b       	sbc	r27, r23

00000444 <__udivmodhi4_ep>:
 444:	88 1f       	adc	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	5a 95       	dec	r21
 44a:	a9 f7       	brne	.-22     	; 0x436 <__udivmodhi4_loop>
 44c:	80 95       	com	r24
 44e:	90 95       	com	r25
 450:	bc 01       	movw	r22, r24
 452:	cd 01       	movw	r24, r26
 454:	08 95       	ret

00000456 <_exit>:
 456:	f8 94       	cli

00000458 <__stop_program>:
 458:	ff cf       	rjmp	.-2      	; 0x458 <__stop_program>
