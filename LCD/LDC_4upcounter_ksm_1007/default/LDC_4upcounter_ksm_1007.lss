
LDC_4upcounter_ksm_1007.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000002ce  00000362  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000362  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c8  00000000  00000000  00000ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000818  00000000  00000000  00000b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001e6  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000498  00000000  00000000  0000157e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00001a18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000142  00000000  00000000  00001abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000012c  00000000  00000000  00001bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001d2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ec       	ldi	r30, 0xCE	; 206
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a2 30       	cpi	r26, 0x02	; 2
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <main>
  c8:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <COMMAND>:



void COMMAND(unsigned char byte)
{
    PORTG = 0xFC;      //PORTG에 RS, RW, E 가 연결되어 있다.
  d0:	e5 e6       	ldi	r30, 0x65	; 101
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	9c ef       	ldi	r25, 0xFC	; 252
  d6:	90 83       	st	Z, r25
    PORTC = byte;           //PORTC에 데이터버스가 연결되어 있다.
  d8:	85 bb       	out	0x15, r24	; 21
    PORTG ^= 0x04;     //E 신호를 H->L로 하기 위해
  da:	80 81       	ld	r24, Z
  dc:	94 e0       	ldi	r25, 0x04	; 4
  de:	89 27       	eor	r24, r25
  e0:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	8f e3       	ldi	r24, 0x3F	; 63
  e4:	9f e1       	ldi	r25, 0x1F	; 31
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <COMMAND+0x16>
  ea:	00 c0       	rjmp	.+0      	; 0xec <COMMAND+0x1c>
  ec:	00 00       	nop
    _delay_ms(2);      //LCD 내부 동작시간
}
  ee:	08 95       	ret

000000f0 <DATA>:

void DATA(unsigned char byte)
{
    PORTG = 0xFD;        //PORTG에 RS, RW, E 가 연결되어 있다.
  f0:	e5 e6       	ldi	r30, 0x65	; 101
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	9d ef       	ldi	r25, 0xFD	; 253
  f6:	90 83       	st	Z, r25
    PORTC = byte;      //PORTC에 데이터버스가 연결되어 있다.
  f8:	85 bb       	out	0x15, r24	; 21
    PORTG ^= 0x04;      //E 신호를 H->L로 하기 위해
  fa:	80 81       	ld	r24, Z
  fc:	94 e0       	ldi	r25, 0x04	; 4
  fe:	89 27       	eor	r24, r25
 100:	80 83       	st	Z, r24
 102:	8f e3       	ldi	r24, 0x3F	; 63
 104:	9f e1       	ldi	r25, 0x1F	; 31
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <DATA+0x16>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <DATA+0x1c>
 10c:	00 00       	nop
    _delay_ms(2);       //LCD 내부 동작시간
}
 10e:	08 95       	ret

00000110 <init_system>:

void init_system(void)
{
     DDRC = 0xFF;     //LCD 데이터 버스
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	84 bb       	out	0x14, r24	; 20
     PORTC = 0xFF;
 114:	85 bb       	out	0x15, r24	; 21
     DDRG = 0xFF;     //LCD 컨트롤 신호(PG2=LCD_EN, PG1=RW, PG0=RS)
 116:	80 93 64 00 	sts	0x0064, r24
     PORTG = 0xFF;
 11a:	80 93 65 00 	sts	0x0065, r24
}
 11e:	08 95       	ret

00000120 <init_LCD>:
 120:	8f e5       	ldi	r24, 0x5F	; 95
 122:	9a ee       	ldi	r25, 0xEA	; 234
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <init_LCD+0x4>
 128:	00 c0       	rjmp	.+0      	; 0x12a <init_LCD+0xa>
 12a:	00 00       	nop

void init_LCD(void)
{
       _delay_ms(15);            //15msec 이상 시간지연
       COMMAND(0x38);         //Function set, 기능셋(데이터버스 8비트, 라인수:2줄)
 12c:	88 e3       	ldi	r24, 0x38	; 56
 12e:	0e 94 68 00 	call	0xd0	; 0xd0 <COMMAND>
 132:	8f e1       	ldi	r24, 0x1F	; 31
 134:	9e e4       	ldi	r25, 0x4E	; 78
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <init_LCD+0x16>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <init_LCD+0x1c>
 13c:	00 00       	nop
       _delay_ms(5);                //4.1msec 이상 시간지연, 생략가능
       COMMAND(0x38);         //기능셋, 생략 가능
 13e:	88 e3       	ldi	r24, 0x38	; 56
 140:	0e 94 68 00 	call	0xd0	; 0xd0 <COMMAND>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	8f e8       	ldi	r24, 0x8F	; 143
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <init_LCD+0x28>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <init_LCD+0x2e>
 14e:	00 00       	nop
       _delay_us(100);              //100usec 이상 시간지연, 생략가능
       COMMAND(0x38);          //기능셋, 생략 가능
 150:	88 e3       	ldi	r24, 0x38	; 56
 152:	0e 94 68 00 	call	0xd0	; 0xd0 <COMMAND>
       COMMAND(0x08);          //표시 Off , 생략 가능
 156:	88 e0       	ldi	r24, 0x08	; 8
 158:	0e 94 68 00 	call	0xd0	; 0xd0 <COMMAND>
       COMMAND(0x01);         //화면 지우기
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	0e 94 68 00 	call	0xd0	; 0xd0 <COMMAND>
       COMMAND(0x06);        //엔트리모드셋
 162:	86 e0       	ldi	r24, 0x06	; 6
 164:	0e 94 68 00 	call	0xd0	; 0xd0 <COMMAND>
       COMMAND(0x0C);         //표시 on
 168:	8c e0       	ldi	r24, 0x0C	; 12
 16a:	0e 94 68 00 	call	0xd0	; 0xd0 <COMMAND>
}
 16e:	08 95       	ret

00000170 <STRING>:

void STRING(unsigned char font[], unsigned char n)
{
 170:	ef 92       	push	r14
 172:	ff 92       	push	r15
 174:	1f 93       	push	r17
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	0f 92       	push	r0
 17c:	cd b7       	in	r28, 0x3d	; 61
 17e:	de b7       	in	r29, 0x3e	; 62
 180:	18 2f       	mov	r17, r24
	 unsigned char i;
	 for(i=0 ; i<n ; i++)
 182:	e8 2e       	mov	r14, r24
 184:	f9 2e       	mov	r15, r25
 186:	07 c0       	rjmp	.+14     	; 0x196 <STRING+0x26>
	     {
	          DATA(font[i]);
 188:	f7 01       	movw	r30, r14
 18a:	81 91       	ld	r24, Z+
 18c:	7f 01       	movw	r14, r30
 18e:	69 83       	std	Y+1, r22	; 0x01
 190:	0e 94 78 00 	call	0xf0	; 0xf0 <DATA>
 194:	69 81       	ldd	r22, Y+1	; 0x01
}

void STRING(unsigned char font[], unsigned char n)
{
	 unsigned char i;
	 for(i=0 ; i<n ; i++)
 196:	8e 2d       	mov	r24, r14
 198:	81 1b       	sub	r24, r17
 19a:	86 17       	cp	r24, r22
 19c:	a8 f3       	brcs	.-22     	; 0x188 <STRING+0x18>
	     {
	          DATA(font[i]);
	     }
}
 19e:	0f 90       	pop	r0
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	1f 91       	pop	r17
 1a6:	ff 90       	pop	r15
 1a8:	ef 90       	pop	r14
 1aa:	08 95       	ret

000001ac <MOVE>:

void MOVE(int y, int x)     //커서 이동
{               
	 if(y==1)  
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	91 05       	cpc	r25, r1
 1b0:	19 f4       	brne	.+6      	; 0x1b8 <MOVE+0xc>
	  COMMAND(0x80+x-1);  //1행
 1b2:	86 2f       	mov	r24, r22
 1b4:	81 58       	subi	r24, 0x81	; 129
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <MOVE+0x10>
	 else      
	  COMMAND(0xc0+x-1);  //2행
 1b8:	86 2f       	mov	r24, r22
 1ba:	81 54       	subi	r24, 0x41	; 65
 1bc:	0e 94 68 00 	call	0xd0	; 0xd0 <COMMAND>
 1c0:	08 95       	ret

000001c2 <main>:
}


int main(){
	
	init_system();
 1c2:	0e 94 88 00 	call	0x110	; 0x110 <init_system>
	init_LCD();
 1c6:	0e 94 90 00 	call	0x120	; 0x120 <init_LCD>
	
	while(1){
		
		COMMAND(0x02);

		DATA((count/1000)%10+0x30);
 1ca:	08 ee       	ldi	r16, 0xE8	; 232
 1cc:	13 e0       	ldi	r17, 0x03	; 3
 1ce:	ca e0       	ldi	r28, 0x0A	; 10
 1d0:	d0 e0       	ldi	r29, 0x00	; 0
		DATA((count/100)%10+0x30);
 1d2:	84 e6       	ldi	r24, 0x64	; 100
 1d4:	e8 2e       	mov	r14, r24
 1d6:	f1 2c       	mov	r15, r1
	init_system();
	init_LCD();
	
	while(1){
		
		COMMAND(0x02);
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	0e 94 68 00 	call	0xd0	; 0xd0 <COMMAND>

		DATA((count/1000)%10+0x30);
 1de:	80 91 00 01 	lds	r24, 0x0100
 1e2:	90 91 01 01 	lds	r25, 0x0101
 1e6:	b8 01       	movw	r22, r16
 1e8:	0e 94 3e 01 	call	0x27c	; 0x27c <__divmodhi4>
 1ec:	cb 01       	movw	r24, r22
 1ee:	be 01       	movw	r22, r28
 1f0:	0e 94 3e 01 	call	0x27c	; 0x27c <__divmodhi4>
 1f4:	80 5d       	subi	r24, 0xD0	; 208
 1f6:	0e 94 78 00 	call	0xf0	; 0xf0 <DATA>
		DATA((count/100)%10+0x30);
 1fa:	80 91 00 01 	lds	r24, 0x0100
 1fe:	90 91 01 01 	lds	r25, 0x0101
 202:	b7 01       	movw	r22, r14
 204:	0e 94 3e 01 	call	0x27c	; 0x27c <__divmodhi4>
 208:	cb 01       	movw	r24, r22
 20a:	be 01       	movw	r22, r28
 20c:	0e 94 3e 01 	call	0x27c	; 0x27c <__divmodhi4>
 210:	80 5d       	subi	r24, 0xD0	; 208
 212:	0e 94 78 00 	call	0xf0	; 0xf0 <DATA>
		DATA((count/10)%10+0x30);
 216:	80 91 00 01 	lds	r24, 0x0100
 21a:	90 91 01 01 	lds	r25, 0x0101
 21e:	be 01       	movw	r22, r28
 220:	0e 94 3e 01 	call	0x27c	; 0x27c <__divmodhi4>
 224:	cb 01       	movw	r24, r22
 226:	be 01       	movw	r22, r28
 228:	0e 94 3e 01 	call	0x27c	; 0x27c <__divmodhi4>
 22c:	80 5d       	subi	r24, 0xD0	; 208
 22e:	0e 94 78 00 	call	0xf0	; 0xf0 <DATA>
		DATA(count%10+0x30);
 232:	80 91 00 01 	lds	r24, 0x0100
 236:	90 91 01 01 	lds	r25, 0x0101
 23a:	be 01       	movw	r22, r28
 23c:	0e 94 3e 01 	call	0x27c	; 0x27c <__divmodhi4>
 240:	80 5d       	subi	r24, 0xD0	; 208
 242:	0e 94 78 00 	call	0xf0	; 0xf0 <DATA>

		count++;
 246:	80 91 00 01 	lds	r24, 0x0100
 24a:	90 91 01 01 	lds	r25, 0x0101
 24e:	01 96       	adiw	r24, 0x01	; 1
 250:	90 93 01 01 	sts	0x0101, r25
 254:	80 93 00 01 	sts	0x0100, r24
		if(count >= 10000) count = 0;
 258:	27 e2       	ldi	r18, 0x27	; 39
 25a:	80 31       	cpi	r24, 0x10	; 16
 25c:	92 07       	cpc	r25, r18
 25e:	24 f0       	brlt	.+8      	; 0x268 <main+0xa6>
 260:	10 92 01 01 	sts	0x0101, r1
 264:	10 92 00 01 	sts	0x0100, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	91 ee       	ldi	r25, 0xE1	; 225
 26c:	a4 e0       	ldi	r26, 0x04	; 4
 26e:	81 50       	subi	r24, 0x01	; 1
 270:	90 40       	sbci	r25, 0x00	; 0
 272:	a0 40       	sbci	r26, 0x00	; 0
 274:	e1 f7       	brne	.-8      	; 0x26e <main+0xac>
 276:	00 c0       	rjmp	.+0      	; 0x278 <main+0xb6>
 278:	00 00       	nop
 27a:	ae cf       	rjmp	.-164    	; 0x1d8 <main+0x16>

0000027c <__divmodhi4>:
 27c:	97 fb       	bst	r25, 7
 27e:	09 2e       	mov	r0, r25
 280:	07 26       	eor	r0, r23
 282:	0a d0       	rcall	.+20     	; 0x298 <__divmodhi4_neg1>
 284:	77 fd       	sbrc	r23, 7
 286:	04 d0       	rcall	.+8      	; 0x290 <__divmodhi4_neg2>
 288:	0c d0       	rcall	.+24     	; 0x2a2 <__udivmodhi4>
 28a:	06 d0       	rcall	.+12     	; 0x298 <__divmodhi4_neg1>
 28c:	00 20       	and	r0, r0
 28e:	1a f4       	brpl	.+6      	; 0x296 <__divmodhi4_exit>

00000290 <__divmodhi4_neg2>:
 290:	70 95       	com	r23
 292:	61 95       	neg	r22
 294:	7f 4f       	sbci	r23, 0xFF	; 255

00000296 <__divmodhi4_exit>:
 296:	08 95       	ret

00000298 <__divmodhi4_neg1>:
 298:	f6 f7       	brtc	.-4      	; 0x296 <__divmodhi4_exit>
 29a:	90 95       	com	r25
 29c:	81 95       	neg	r24
 29e:	9f 4f       	sbci	r25, 0xFF	; 255
 2a0:	08 95       	ret

000002a2 <__udivmodhi4>:
 2a2:	aa 1b       	sub	r26, r26
 2a4:	bb 1b       	sub	r27, r27
 2a6:	51 e1       	ldi	r21, 0x11	; 17
 2a8:	07 c0       	rjmp	.+14     	; 0x2b8 <__udivmodhi4_ep>

000002aa <__udivmodhi4_loop>:
 2aa:	aa 1f       	adc	r26, r26
 2ac:	bb 1f       	adc	r27, r27
 2ae:	a6 17       	cp	r26, r22
 2b0:	b7 07       	cpc	r27, r23
 2b2:	10 f0       	brcs	.+4      	; 0x2b8 <__udivmodhi4_ep>
 2b4:	a6 1b       	sub	r26, r22
 2b6:	b7 0b       	sbc	r27, r23

000002b8 <__udivmodhi4_ep>:
 2b8:	88 1f       	adc	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	5a 95       	dec	r21
 2be:	a9 f7       	brne	.-22     	; 0x2aa <__udivmodhi4_loop>
 2c0:	80 95       	com	r24
 2c2:	90 95       	com	r25
 2c4:	bc 01       	movw	r22, r24
 2c6:	cd 01       	movw	r24, r26
 2c8:	08 95       	ret

000002ca <_exit>:
 2ca:	f8 94       	cli

000002cc <__stop_program>:
 2cc:	ff cf       	rjmp	.-2      	; 0x2cc <__stop_program>
