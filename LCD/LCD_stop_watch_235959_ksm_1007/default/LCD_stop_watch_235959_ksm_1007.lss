
LCD_stop_watch_235959_ksm_1007.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000003e6  0000047a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800106  00800106  00000480  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000480  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c8  00000000  00000000  00000bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008a0  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000021f  00000000  00000000  00001540  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004bf  00000000  00000000  0000175f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001c20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000165  00000000  00000000  00001d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e5  00000000  00000000  00001e85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000206a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__vector_7>
  20:	0c 94 03 01 	jmp	0x206	; 0x206 <__vector_8>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ee       	ldi	r30, 0xE6	; 230
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a6 e0       	ldi	r26, 0x06	; 6
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	ae 30       	cpi	r26, 0x0E	; 14
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 1d 01 	call	0x23a	; 0x23a <main>
  c8:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <COMMAND>:

int run = 0, SEC = 0, MIN = 0, HOUR = 0;

void COMMAND(unsigned char byte)
{
    PORTG = 0xFC;      //PORTG에 RS, RW, E 가 연결되어 있다.
  d0:	e5 e6       	ldi	r30, 0x65	; 101
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	9c ef       	ldi	r25, 0xFC	; 252
  d6:	90 83       	st	Z, r25
    PORTC = byte;           //PORTC에 데이터버스가 연결되어 있다.
  d8:	85 bb       	out	0x15, r24	; 21
    PORTG ^= 0x04;     //E 신호를 H->L로 하기 위해
  da:	80 81       	ld	r24, Z
  dc:	94 e0       	ldi	r25, 0x04	; 4
  de:	89 27       	eor	r24, r25
  e0:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	8f e3       	ldi	r24, 0x3F	; 63
  e4:	9f e1       	ldi	r25, 0x1F	; 31
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <COMMAND+0x16>
  ea:	00 c0       	rjmp	.+0      	; 0xec <COMMAND+0x1c>
  ec:	00 00       	nop
    _delay_ms(2);      //LCD 내부 동작시간
}
  ee:	08 95       	ret

000000f0 <DATA>:

void DATA(unsigned char byte)
{
    PORTG = 0xFD;        //PORTG에 RS, RW, E 가 연결되어 있다.
  f0:	e5 e6       	ldi	r30, 0x65	; 101
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	9d ef       	ldi	r25, 0xFD	; 253
  f6:	90 83       	st	Z, r25
    PORTC = byte;      //PORTC에 데이터버스가 연결되어 있다.
  f8:	85 bb       	out	0x15, r24	; 21
    PORTG = 0x00;      //E 신호를 H->L로 하기 위해
  fa:	10 82       	st	Z, r1
  fc:	8f e3       	ldi	r24, 0x3F	; 63
  fe:	9f e1       	ldi	r25, 0x1F	; 31
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <DATA+0x10>
 104:	00 c0       	rjmp	.+0      	; 0x106 <DATA+0x16>
 106:	00 00       	nop
    _delay_ms(2);       //LCD 내부 동작시간
}
 108:	08 95       	ret

0000010a <init_system>:

void init_system(void)
{
     DDRC = 0xFF;     //LCD 데이터 버스
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	84 bb       	out	0x14, r24	; 20
     PORTC = 0xFF;
 10e:	85 bb       	out	0x15, r24	; 21
     DDRG = 0xFF;     //LCD 컨트롤 신호(PG2=LCD_EN, PG1=RW, PG0=RS)
 110:	80 93 64 00 	sts	0x0064, r24
     PORTG = 0xFF;
 114:	80 93 65 00 	sts	0x0065, r24
}
 118:	08 95       	ret

0000011a <init_LCD>:
 11a:	8f e5       	ldi	r24, 0x5F	; 95
 11c:	9a ee       	ldi	r25, 0xEA	; 234
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <init_LCD+0x4>
 122:	00 c0       	rjmp	.+0      	; 0x124 <init_LCD+0xa>
 124:	00 00       	nop

void init_LCD(void)
{
       _delay_ms(15);            //15msec 이상 시간지연
       COMMAND(0x38);         //Function set, 기능셋(데이터버스 8비트, 라인수:2줄)
 126:	88 e3       	ldi	r24, 0x38	; 56
 128:	0e 94 68 00 	call	0xd0	; 0xd0 <COMMAND>
 12c:	8f e1       	ldi	r24, 0x1F	; 31
 12e:	9e e4       	ldi	r25, 0x4E	; 78
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <init_LCD+0x16>
 134:	00 c0       	rjmp	.+0      	; 0x136 <init_LCD+0x1c>
 136:	00 00       	nop
       _delay_ms(5);                //4.1msec 이상 시간지연, 생략가능
       COMMAND(0x38);         //기능셋, 생략 가능
 138:	88 e3       	ldi	r24, 0x38	; 56
 13a:	0e 94 68 00 	call	0xd0	; 0xd0 <COMMAND>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	8f e8       	ldi	r24, 0x8F	; 143
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <init_LCD+0x28>
 146:	00 c0       	rjmp	.+0      	; 0x148 <init_LCD+0x2e>
 148:	00 00       	nop
       _delay_us(100);              //100usec 이상 시간지연, 생략가능
       COMMAND(0x38);          //기능셋, 생략 가능
 14a:	88 e3       	ldi	r24, 0x38	; 56
 14c:	0e 94 68 00 	call	0xd0	; 0xd0 <COMMAND>
       COMMAND(0x08);          //표시 Off , 생략 가능
 150:	88 e0       	ldi	r24, 0x08	; 8
 152:	0e 94 68 00 	call	0xd0	; 0xd0 <COMMAND>
       COMMAND(0x01);                                             //화면 지우기
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 68 00 	call	0xd0	; 0xd0 <COMMAND>
       COMMAND(0x06);        //엔트리모드셋
 15c:	86 e0       	ldi	r24, 0x06	; 6
 15e:	0e 94 68 00 	call	0xd0	; 0xd0 <COMMAND>
       COMMAND(0x0C);         //표시 on
 162:	8c e0       	ldi	r24, 0x0C	; 12
 164:	0e 94 68 00 	call	0xd0	; 0xd0 <COMMAND>
}
 168:	08 95       	ret

0000016a <STRING>:

void STRING(unsigned char font[], unsigned char n)
{
 16a:	ef 92       	push	r14
 16c:	ff 92       	push	r15
 16e:	1f 93       	push	r17
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	0f 92       	push	r0
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
 17a:	18 2f       	mov	r17, r24
	 unsigned char i;
	 for(i=0 ; i<n ; i++)
 17c:	e8 2e       	mov	r14, r24
 17e:	f9 2e       	mov	r15, r25
 180:	07 c0       	rjmp	.+14     	; 0x190 <STRING+0x26>
	     {
	          DATA(font[i]);
 182:	f7 01       	movw	r30, r14
 184:	81 91       	ld	r24, Z+
 186:	7f 01       	movw	r14, r30
 188:	69 83       	std	Y+1, r22	; 0x01
 18a:	0e 94 78 00 	call	0xf0	; 0xf0 <DATA>
 18e:	69 81       	ldd	r22, Y+1	; 0x01
}

void STRING(unsigned char font[], unsigned char n)
{
	 unsigned char i;
	 for(i=0 ; i<n ; i++)
 190:	8e 2d       	mov	r24, r14
 192:	81 1b       	sub	r24, r17
 194:	86 17       	cp	r24, r22
 196:	a8 f3       	brcs	.-22     	; 0x182 <STRING+0x18>
	     {
	          DATA(font[i]);
	     }
}
 198:	0f 90       	pop	r0
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	1f 91       	pop	r17
 1a0:	ff 90       	pop	r15
 1a2:	ef 90       	pop	r14
 1a4:	08 95       	ret

000001a6 <MOVE>:

void MOVE(int y, int x)     //커서 이동
{               
	 if(y==1)  
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	91 05       	cpc	r25, r1
 1aa:	19 f4       	brne	.+6      	; 0x1b2 <MOVE+0xc>
	  COMMAND(0x80+x-1);  //1행
 1ac:	86 2f       	mov	r24, r22
 1ae:	81 58       	subi	r24, 0x81	; 129
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <MOVE+0x10>
	 else      
	  COMMAND(0xc0+x-1);  //2행
 1b2:	86 2f       	mov	r24, r22
 1b4:	81 54       	subi	r24, 0x41	; 65
 1b6:	0e 94 68 00 	call	0xd0	; 0xd0 <COMMAND>
 1ba:	08 95       	ret

000001bc <__vector_7>:
	 }

}


ISR(INT6_vect){
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
 1c6:	5f 93       	push	r21
 1c8:	6f 93       	push	r22
 1ca:	7f 93       	push	r23
 1cc:	8f 93       	push	r24
 1ce:	9f 93       	push	r25
 1d0:	af 93       	push	r26
 1d2:	bf 93       	push	r27
	run = (run+1)%2;
 1d4:	80 91 0c 01 	lds	r24, 0x010C
 1d8:	90 91 0d 01 	lds	r25, 0x010D
 1dc:	01 96       	adiw	r24, 0x01	; 1
 1de:	62 e0       	ldi	r22, 0x02	; 2
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	0e 94 ca 01 	call	0x394	; 0x394 <__divmodhi4>
 1e6:	90 93 0d 01 	sts	0x010D, r25
 1ea:	80 93 0c 01 	sts	0x010C, r24
}
 1ee:	bf 91       	pop	r27
 1f0:	af 91       	pop	r26
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	7f 91       	pop	r23
 1f8:	6f 91       	pop	r22
 1fa:	5f 91       	pop	r21
 1fc:	0f 90       	pop	r0
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	0f 90       	pop	r0
 202:	1f 90       	pop	r1
 204:	18 95       	reti

00000206 <__vector_8>:

ISR(INT7_vect){
 206:	1f 92       	push	r1
 208:	0f 92       	push	r0
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
	run = 0;
 210:	10 92 0d 01 	sts	0x010D, r1
 214:	10 92 0c 01 	sts	0x010C, r1
	SEC = 0,MIN = 0,HOUR = 0;
 218:	10 92 0b 01 	sts	0x010B, r1
 21c:	10 92 0a 01 	sts	0x010A, r1
 220:	10 92 09 01 	sts	0x0109, r1
 224:	10 92 08 01 	sts	0x0108, r1
 228:	10 92 07 01 	sts	0x0107, r1
 22c:	10 92 06 01 	sts	0x0106, r1

}
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

0000023a <main>:
}


int main(void)
{
	DDRE = 0x0f;
 23a:	8f e0       	ldi	r24, 0x0F	; 15
 23c:	82 b9       	out	0x02, r24	; 2

	SREG = 0x80;
 23e:	80 e8       	ldi	r24, 0x80	; 128
 240:	8f bf       	out	0x3f, r24	; 63
	EIMSK = 0x40;
 242:	80 e4       	ldi	r24, 0x40	; 64
 244:	89 bf       	out	0x39, r24	; 57
	EICRB = 0x30;
 246:	80 e3       	ldi	r24, 0x30	; 48
 248:	8a bf       	out	0x3a, r24	; 58
	EIMSK = 0xC0;
 24a:	80 ec       	ldi	r24, 0xC0	; 192
 24c:	89 bf       	out	0x39, r24	; 57
	EICRB = 0xa0;
 24e:	80 ea       	ldi	r24, 0xA0	; 160
 250:	8a bf       	out	0x3a, r24	; 58

	init_system();
 252:	0e 94 85 00 	call	0x10a	; 0x10a <init_system>
	init_LCD ();
 256:	0e 94 8d 00 	call	0x11a	; 0x11a <init_LCD>
	MOVE(1,7);
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	67 e0       	ldi	r22, 0x07	; 7
 260:	70 e0       	ldi	r23, 0x00	; 0
 262:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <MOVE>
	STRING("TIME",4);
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	64 e0       	ldi	r22, 0x04	; 4
 26c:	0e 94 b5 00 	call	0x16a	; 0x16a <STRING>
			    }
            }	
		}		
		  
		MOVE(2,5);
		DATA(HOUR/10+0x30);  //시의 10자리
 270:	ca e0       	ldi	r28, 0x0A	; 10
 272:	d0 e0       	ldi	r29, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 274:	8f ef       	ldi	r24, 0xFF	; 255
 276:	93 ed       	ldi	r25, 0xD3	; 211
 278:	a0 e3       	ldi	r26, 0x30	; 48
 27a:	81 50       	subi	r24, 0x01	; 1
 27c:	90 40       	sbci	r25, 0x00	; 0
 27e:	a0 40       	sbci	r26, 0x00	; 0
 280:	e1 f7       	brne	.-8      	; 0x27a <main+0x40>
 282:	00 c0       	rjmp	.+0      	; 0x284 <main+0x4a>
 284:	00 00       	nop
	MOVE(1,7);
	STRING("TIME",4);
	 while(1)
	 {	
	 	_delay_ms(1000);
	 	if(run == 1) SEC++;
 286:	80 91 0c 01 	lds	r24, 0x010C
 28a:	90 91 0d 01 	lds	r25, 0x010D
 28e:	81 30       	cpi	r24, 0x01	; 1
 290:	91 05       	cpc	r25, r1
 292:	49 f4       	brne	.+18     	; 0x2a6 <main+0x6c>
 294:	80 91 0a 01 	lds	r24, 0x010A
 298:	90 91 0b 01 	lds	r25, 0x010B
 29c:	01 96       	adiw	r24, 0x01	; 1
 29e:	90 93 0b 01 	sts	0x010B, r25
 2a2:	80 93 0a 01 	sts	0x010A, r24
		  
	    if(SEC>=60) 
 2a6:	80 91 0a 01 	lds	r24, 0x010A
 2aa:	90 91 0b 01 	lds	r25, 0x010B
 2ae:	8c 33       	cpi	r24, 0x3C	; 60
 2b0:	91 05       	cpc	r25, r1
 2b2:	24 f1       	brlt	.+72     	; 0x2fc <main+0xc2>
	    {	
         	SEC=0;
 2b4:	10 92 0b 01 	sts	0x010B, r1
 2b8:	10 92 0a 01 	sts	0x010A, r1
            MIN++;
 2bc:	80 91 08 01 	lds	r24, 0x0108
 2c0:	90 91 09 01 	lds	r25, 0x0109
 2c4:	01 96       	adiw	r24, 0x01	; 1
 2c6:	90 93 09 01 	sts	0x0109, r25
 2ca:	80 93 08 01 	sts	0x0108, r24
            if(MIN>=60)  
 2ce:	8c 33       	cpi	r24, 0x3C	; 60
 2d0:	91 05       	cpc	r25, r1
 2d2:	a4 f0       	brlt	.+40     	; 0x2fc <main+0xc2>
           	{	
             	MIN=0;
 2d4:	10 92 09 01 	sts	0x0109, r1
 2d8:	10 92 08 01 	sts	0x0108, r1
			    HOUR++;
 2dc:	80 91 06 01 	lds	r24, 0x0106
 2e0:	90 91 07 01 	lds	r25, 0x0107
 2e4:	01 96       	adiw	r24, 0x01	; 1
 2e6:	90 93 07 01 	sts	0x0107, r25
 2ea:	80 93 06 01 	sts	0x0106, r24
			    if(HOUR>=24)
 2ee:	88 31       	cpi	r24, 0x18	; 24
 2f0:	91 05       	cpc	r25, r1
 2f2:	24 f0       	brlt	.+8      	; 0x2fc <main+0xc2>
			    {	
			    	HOUR=0;
 2f4:	10 92 07 01 	sts	0x0107, r1
 2f8:	10 92 06 01 	sts	0x0106, r1
			    }
            }	
		}		
		  
		MOVE(2,5);
 2fc:	82 e0       	ldi	r24, 0x02	; 2
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	65 e0       	ldi	r22, 0x05	; 5
 302:	70 e0       	ldi	r23, 0x00	; 0
 304:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <MOVE>
		DATA(HOUR/10+0x30);  //시의 10자리
 308:	80 91 06 01 	lds	r24, 0x0106
 30c:	90 91 07 01 	lds	r25, 0x0107
 310:	be 01       	movw	r22, r28
 312:	0e 94 ca 01 	call	0x394	; 0x394 <__divmodhi4>
 316:	86 2f       	mov	r24, r22
 318:	80 5d       	subi	r24, 0xD0	; 208
 31a:	0e 94 78 00 	call	0xf0	; 0xf0 <DATA>
		DATA(HOUR%10+0x30);  //시의 1자리
 31e:	80 91 06 01 	lds	r24, 0x0106
 322:	90 91 07 01 	lds	r25, 0x0107
 326:	be 01       	movw	r22, r28
 328:	0e 94 ca 01 	call	0x394	; 0x394 <__divmodhi4>
 32c:	80 5d       	subi	r24, 0xD0	; 208
 32e:	0e 94 78 00 	call	0xf0	; 0xf0 <DATA>
		DATA(':');     
 332:	8a e3       	ldi	r24, 0x3A	; 58
 334:	0e 94 78 00 	call	0xf0	; 0xf0 <DATA>
		DATA(MIN/10+0x30);  //분의 10자리
 338:	80 91 08 01 	lds	r24, 0x0108
 33c:	90 91 09 01 	lds	r25, 0x0109
 340:	be 01       	movw	r22, r28
 342:	0e 94 ca 01 	call	0x394	; 0x394 <__divmodhi4>
 346:	86 2f       	mov	r24, r22
 348:	80 5d       	subi	r24, 0xD0	; 208
 34a:	0e 94 78 00 	call	0xf0	; 0xf0 <DATA>
		DATA(MIN%10+0x30);  //분의 1자리
 34e:	80 91 08 01 	lds	r24, 0x0108
 352:	90 91 09 01 	lds	r25, 0x0109
 356:	be 01       	movw	r22, r28
 358:	0e 94 ca 01 	call	0x394	; 0x394 <__divmodhi4>
 35c:	80 5d       	subi	r24, 0xD0	; 208
 35e:	0e 94 78 00 	call	0xf0	; 0xf0 <DATA>
		DATA(':');     
 362:	8a e3       	ldi	r24, 0x3A	; 58
 364:	0e 94 78 00 	call	0xf0	; 0xf0 <DATA>
		DATA(SEC/10+0x30);  //초의 10자리
 368:	80 91 0a 01 	lds	r24, 0x010A
 36c:	90 91 0b 01 	lds	r25, 0x010B
 370:	be 01       	movw	r22, r28
 372:	0e 94 ca 01 	call	0x394	; 0x394 <__divmodhi4>
 376:	86 2f       	mov	r24, r22
 378:	80 5d       	subi	r24, 0xD0	; 208
 37a:	0e 94 78 00 	call	0xf0	; 0xf0 <DATA>
		DATA(SEC%10+0x30);  //초의 1자리
 37e:	80 91 0a 01 	lds	r24, 0x010A
 382:	90 91 0b 01 	lds	r25, 0x010B
 386:	be 01       	movw	r22, r28
 388:	0e 94 ca 01 	call	0x394	; 0x394 <__divmodhi4>
 38c:	80 5d       	subi	r24, 0xD0	; 208
 38e:	0e 94 78 00 	call	0xf0	; 0xf0 <DATA>
	 }
 392:	70 cf       	rjmp	.-288    	; 0x274 <main+0x3a>

00000394 <__divmodhi4>:
 394:	97 fb       	bst	r25, 7
 396:	09 2e       	mov	r0, r25
 398:	07 26       	eor	r0, r23
 39a:	0a d0       	rcall	.+20     	; 0x3b0 <__divmodhi4_neg1>
 39c:	77 fd       	sbrc	r23, 7
 39e:	04 d0       	rcall	.+8      	; 0x3a8 <__divmodhi4_neg2>
 3a0:	0c d0       	rcall	.+24     	; 0x3ba <__udivmodhi4>
 3a2:	06 d0       	rcall	.+12     	; 0x3b0 <__divmodhi4_neg1>
 3a4:	00 20       	and	r0, r0
 3a6:	1a f4       	brpl	.+6      	; 0x3ae <__divmodhi4_exit>

000003a8 <__divmodhi4_neg2>:
 3a8:	70 95       	com	r23
 3aa:	61 95       	neg	r22
 3ac:	7f 4f       	sbci	r23, 0xFF	; 255

000003ae <__divmodhi4_exit>:
 3ae:	08 95       	ret

000003b0 <__divmodhi4_neg1>:
 3b0:	f6 f7       	brtc	.-4      	; 0x3ae <__divmodhi4_exit>
 3b2:	90 95       	com	r25
 3b4:	81 95       	neg	r24
 3b6:	9f 4f       	sbci	r25, 0xFF	; 255
 3b8:	08 95       	ret

000003ba <__udivmodhi4>:
 3ba:	aa 1b       	sub	r26, r26
 3bc:	bb 1b       	sub	r27, r27
 3be:	51 e1       	ldi	r21, 0x11	; 17
 3c0:	07 c0       	rjmp	.+14     	; 0x3d0 <__udivmodhi4_ep>

000003c2 <__udivmodhi4_loop>:
 3c2:	aa 1f       	adc	r26, r26
 3c4:	bb 1f       	adc	r27, r27
 3c6:	a6 17       	cp	r26, r22
 3c8:	b7 07       	cpc	r27, r23
 3ca:	10 f0       	brcs	.+4      	; 0x3d0 <__udivmodhi4_ep>
 3cc:	a6 1b       	sub	r26, r22
 3ce:	b7 0b       	sbc	r27, r23

000003d0 <__udivmodhi4_ep>:
 3d0:	88 1f       	adc	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	5a 95       	dec	r21
 3d6:	a9 f7       	brne	.-22     	; 0x3c2 <__udivmodhi4_loop>
 3d8:	80 95       	com	r24
 3da:	90 95       	com	r25
 3dc:	bc 01       	movw	r22, r24
 3de:	cd 01       	movw	r24, r26
 3e0:	08 95       	ret

000003e2 <_exit>:
 3e2:	f8 94       	cli

000003e4 <__stop_program>:
 3e4:	ff cf       	rjmp	.-2      	; 0x3e4 <__stop_program>
